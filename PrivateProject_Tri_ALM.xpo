Exportfile for AOT version 1.0 or later
Formatversion: 1

***Element: CLS

; Microsoft Dynamics AX Class: EditorScripts unloaded
; --------------------------------------------------------------------------------
  CLSVERSION 1
  
  CLASS #EditorScripts
    PROPERTIES
      Name                #EditorScripts
      RunOn               #Client
      Origin              #{2D0D0984-0000-1000-4BE1-54DC59156563}
      LegacyId            #2436
    ENDPROPERTIES
    
    METHODS
      SOURCE #addIns_CheckOutParentNode
        #//Check Out Parent Node - 10 Aug 2010 at 10:30:34 by Rayso
        #public void addIns_CheckOutParentNode(Editor e)
        #{
        #    TreeNode                    treeNode = TreeNode::findNode(e.path());
        #    ;
        #
        #    treeNode = TreeNode::findNode(xUtilElements::getNodePathRough(xUtilElements::parentElement(xUtilElements::findTreeNode(treeNode))));
        #
        #    if (treeNode)
        #    {
        #        try
        #        {
        #            versionControl.getLatestVersion(treeNode);
        #            versionControl.checkOut(treeNode);
        #        }
        #        catch
        #        {
        #            Error('Cannot Check out Node');
        #        }
        #    }
        #}
      ENDSOURCE
      SOURCE #addIns_OpenNewWindow
        #public void addIns_OpenNewWindow(Editor e)
        #{
        #    TreeNode treeNode = TreeNode::findNode(e.path());
        #    ;
        #    treeNode = TreeNode::findNode(xUtilElements::getNodePathRough(xUtilElements::parentElement(xUtilElements::findTreeNode(treeNode))));
        #    if (treeNode)
        #        treeNode.AOTnewWindow();
        #}
      ENDSOURCE
      SOURCE #addIns_OpenNewWindowSelected
        ##TreeNodeSysNodeType
        ##TokenTypes
        ##AOT
        #void addIns_OpenNewWindowSelected(Editor e)
        #{
        #    TreeNode            treeNode;
        #    TreeNode            treeNodeNew;
        #    str                 fieldName;
        #    DictField           df;
        #    xRefTmpReferences   tmpxRefReferences;
        #
        #    ;
        #    fieldName = substr(e.currentLine(), e.selectionStartCol(), e.selectionEndCol() - e.selectionStartCol());
        #
        #    treeNode = TreeNode::findNode(e.path());
        #
        #    treeNode.AOTmakeXref(1);
        #    tmpxRefReferences = xRefCreate::makeTmp(infolog.lastxRef());
        #
        #    xppScanner::populateXRefTmpReferenceWithSymbols(tmpxRefReferences,treeNode.AOTgetSource(),[#SymbolClassSYMBOL]);
        #
        #    tmpxRefReferences.clear();
        #    select tmpxRefReferences
        #        where tmpxRefReferences.Column   == e.selectionStartCol()
        #        &&  tmpxRefReferences.line       == e.selectionStartLine();
        #
        #    switch (tmpxRefReferences.Kind)
        #    {
        #        case xRefKind::Table:
        #            treeNodeNew = TreeNode::findNode(#TablesPath + #AOTDelimiter + (tmpxRefReferences.ParentName ?
        #                                                    tmpxRefReferences.ParentName : tmpxRefReferences.name) );
        #            break;
        #        case xRefKind::TableField:
        #            df = new DictField(tmpxRefReferences.parentId,  fieldname2id(tmpxRefReferences.parentId, tmpxRefReferences.name));
        #            if (df.baseType() == Types::Enum)
        #            {
        #                treeNodeNew = TreeNode::findNode(#BaseEnumsPath + #AOTDelimiter + enumid2name(df.enumId()));
        #            }
        #            else
        #            {
        #                treeNodeNew = TreeNode::findNode(#ExtendedDataTypesPath + #AOTDelimiter + extendedTypeId2name(df.typeId()) );
        #            }
        #            break;
        #        case xRefKind::Class:
        #            treeNodeNew = TreeNode::findNode(#ClassesPath + #AOTDelimiter + (tmpxRefReferences.ParentName ?
        #                                                    tmpxRefReferences.ParentName : tmpxRefReferences.name));
        #
        #            break;
        #        case xRefKind::Enum:
        #            treeNodeNew = TreeNode::findNode(#BaseEnumsPath + #AOTDelimiter + (tmpxRefReferences.ParentName ?
        #                                                    tmpxRefReferences.ParentName : tmpxRefReferences.name));
        #
        #            break;
        #        case xRefKind::ExtendedType:
        #            treeNodeNew = TreeNode::findNode(#ExtendedDataTypesPath + #AOTDelimiter + (tmpxRefReferences.ParentName ?
        #                                                    tmpxRefReferences.ParentName : tmpxRefReferences.name));
        #
        #            break;
        #        case xRefKind::Form:
        #            treeNodeNew = TreeNode::findNode(#FormsPath + #AOTDelimiter + (tmpxRefReferences.ParentName ?
        #                                                    tmpxRefReferences.ParentName : tmpxRefReferences.name));
        #
        #            break;
        #        case xRefKind::Report:
        #            treeNodeNew = TreeNode::findNode(#ReportsPath + #AOTDelimiter + (tmpxRefReferences.ParentName ?
        #                                                    tmpxRefReferences.ParentName : tmpxRefReferences.name));
        #
        #            break;
        #        case xRefKind::Map:
        #            treeNodeNew = TreeNode::findNode(#TableMapsPath + #AOTDelimiter + (tmpxRefReferences.ParentName ?
        #                                                    tmpxRefReferences.ParentName : tmpxRefReferences.name));
        #
        #            break;
        #
        #    }
        #    if (treeNodeNew)
        #    {
        #        treeNodeNew.AOTnewWindow();
        #    }
        #}
        #
      ENDSOURCE
      SOURCE #classDeclaration
        #// This is a framework class. Customizing this class may cause problems with future upgrades to the software.
        #class EditorScripts
        #{
        #}
      ENDSOURCE
      SOURCE #comments_CommentBlock
        #public void comments_CommentBlock(Editor _editor)
        #{
        #    str text = EditorScripts::getSelectedText(_editor);
        #    ;
        #
        #    _editor.insertLines(strfmt('/*\n%1*/',text));
        #}
      ENDSOURCE
      SOURCE #comments_InsertBPDeviationTag
        #// Changed on 21 Apr 2010 at 10:37:52 by Rayso
        #public void comments_InsertBPDeviationTag(Editor _editor)
        #{
        #    ;
        #
        #    _editor.unmark();
        #    _editor.insertLines('//BP Deviation Documented');
        #}
      ENDSOURCE
      SOURCE #comments_InsertCommentDevTag
        #// Changed on 29 Jun 2009 at 10:37:52 by Rayso
        #public void comments_InsertCommentDevTag(Editor _editor)
        #{
        #    Dialog      dialog  = new Dialog('Insert Service Request No');
        #    DialogField dlgSR   = dialog.addField(extendedtypestr(num),'Service Request No');
        #    num         srNo;
        #    str         selectedText;
        #    ;
        #
        #    if(dialog.run())
        #    {
        #        srNo = dlgSR.value();
        #
        #        selectedText = EditorScripts::getSelectedText(_editor);
        #
        #        _editor.insertLines(strfmt('//%1 - ',srNo)
        #                        + date2str(SystemDateGet(),123,2,1,3,1,4, DateFlags::FormatAll )
        #                        + ' at ' + time2str(timenow(), 1, 1)
        #                        + ' by ' + curuserid()
        #                        + ' - Start'
        #                        + '\n/*\n' + selectedText);
        #        _editor.insertLines(strfmt('*/\n    //%1 - ',srNo)
        #                        + date2str(SystemDateGet(),123,2,1,3,1,4, DateFlags::FormatAll )
        #                        + ' at ' + time2str(timenow(), 1, 1)
        #                        + ' by ' + curuserid()
        #                        + ' - End');
        #    }
        #}
      ENDSOURCE
      SOURCE #comments_InsertDate
        #// Changed on 29 Jun 2009 at 10:37:52 by Rayso
        #public void comments_InsertDate(Editor _editor)
        #{
        #    ;
        #    _editor.insertLines(strfmt('%1',systemDateGet()));
        #}
      ENDSOURCE
      SOURCE #comments_InsertDeveloperTag
        #// Changed on 29 Jun 2009 at 10:37:52 by Rayso
        #public void comments_InsertDeveloperTag(Editor _editor)
        #{
        #    Dialog      dialog  = new Dialog('Insert Service Request No');
        #    DialogField dlgSR   = dialog.addField(extendedtypestr(num),'Service Request No');
        #    num         srNo;
        #    ;
        #
        #    if(dialog.run())
        #    {
        #        srNo = dlgSR.value();
        #
        #        _editor.unmark();
        #        _editor.insertLines(strfmt('//%1 - ',srNo)
        #                        + date2str(SystemDateGet(),123,2,1,3,1,4, DateFlags::FormatAll )
        #                        + ' at ' + time2str(timenow(), 1, 1)
        #                        + ' by ' + curuserid());
        #    }
        #}
      ENDSOURCE
      SOURCE #comments_InsertDevTagBrackets
        #// Changed on 29 Jun 2009 at 10:37:52 by Rayso
        #public void comments_InsertDevTagBrackets(Editor _editor)
        #{
        #    Dialog      dialog  = new Dialog('Insert Service Request No');
        #    DialogField dlgSR   = dialog.addField(extendedtypestr(num),'Service Request No');
        #    num         srNo;
        #    str         selectedText;
        #    ;
        #
        #    if(dialog.run())
        #    {
        #        srNo = dlgSR.value();
        #
        #        selectedText = EditorScripts::getSelectedText(_editor);
        #
        #        _editor.insertLines(strfmt('    //%1 - ',srNo)
        #                        + date2str(SystemDateGet(),123,2,1,3,1,4, DateFlags::FormatAll )
        #                        + ' at ' + time2str(timenow(), 1, 1)
        #                        + ' by ' + curuserid()
        #                        + ' - Start'
        #                        + '\n' + selectedText + strfmt('    //%1 - ',srNo)
        #                        + date2str(SystemDateGet(),123,2,1,3,1,4, DateFlags::FormatAll )
        #                        + ' at ' + time2str(timenow(), 1, 1)
        #                        + ' by ' + curuserid()
        #                        + ' - End');
        #    }
        #}
      ENDSOURCE
      SOURCE #comments_insertHeader
        #public void comments_insertHeader(Editor e)
        #{
        #    e.unmark();
        #    e.gotoLine(1);
        #    e.gotoCol(1);
        #
        #    e.insertLines('// Changed on ' + date2str(SystemDateGet(),123,2,1,3,1,4, DateFlags::FormatAll ) + ' at ' + time2str(timenow(), 1, 1) + ' by ' + curuserid() + '\n');
        #
        #}
      ENDSOURCE
      SOURCE #comments_projectTxt
        ##define.StartComment("// \%1 \%4 \%3 \%2 -->\n")
        ##define.EndComment  ("// \%1 \%4 \%3 \%2 <--\n")
        ##define.CurrentVersion(1)
        #void comments_projectTxt(Editor e)
        #{
        #    Dialog          dialog = new Dialog("Insert project comments", this);
        #    DialogField     dlgFieldMod = dialog.addField(extendedTypeStr(FreeText), "Enter project name");
        #    DialogField     dlgFieldTxt = dialog.addField(extendedTypeStr(SourceLine), "Enter code comment");
        #    int             start, end, firstSym;
        #    container       packedData;
        #    SourceLine      projectDescription;
        #    FreeText        projectCode;
        #    int             version;
        #    ;
        #    packedData = xSysLastValue::getValue(curExt(), curUserId(), UtilElementType::Class, classId2Name(classIdGet(this)), funcName());
        #    try
        #    {
        #        if (conLen(packedData) && conPeek(packedData, 1) == #CurrentVersion)
        #            [version, projectCode, projectDescription] = packedData;
        #        if (version != #CurrentVersion)
        #            [projectCode, projectDescription] = ['', ''];
        #    }
        #    catch
        #    {
        #        projectCode = '';
        #        projectDescription = '';
        #    }
        #
        #    dlgFieldMod.value(projectCode);
        #    dlgFieldTxt.value(projectDescription);
        #
        #    if (dialog.run())
        #    {
        #        projectCode         = dlgFieldMod.value();
        #        projectDescription  = dlgFieldTxt.value();
        #
        #        start = e.selectionStartLine();
        #        end   = e.selectionEndLine();
        #        e.gotoLine(start);
        #        firstSym = strnfind(e.currentLine(), " ", 1, strlen(e.currentLine()));
        #        e.unmark();
        #
        #        if (start > 1)
        #        {
        #            e.gotoLine(end + 1);
        #            e.gotoCol(1);
        #            e.insertLines(strrep(" ", firstSym - 1) + strfmt(#EndComment, projectCode, strUpr(curUserId()),
        #                                                                        date2str(SystemDateGet(),123,2,2,2,2,4), projectDescription));
        #        }
        #
        #        e.gotoLine(start);
        #        e.gotoCol(1);
        #        e.insertLines(strrep(" ", firstSym - 1) + strfmt(#StartComment, projectCode, strUpr(curUserId()),
        #                                                                        date2str(SystemDateGet(),123,2,2,2,2,4), projectDescription));
        #
        #        xSysLastValue::putValue([#CurrentVersion, projectCode, projectDescription], curExt(), curUserId(), UtilElementType::Class,
        #                                classId2Name(classIdGet(this)), funcName());
        #    }
        #}
        #
        #
      ENDSOURCE
      SOURCE #comments_SerjCMTII
        ##define.StartComment("//Serj - SR012610 - Commodity Trading II - Start \n")
        ##define.EndComment  ("//Serj - SR012610 - Commodity Trading II - End")
        ##define.CurrentVersion(1)
        #void comments_SerjCMTII(Editor e)
        #{
        #    int             start, end, firstSym;
        #    container       packedData;
        #    ;
        #    packedData = xSysLastValue::getValue(curExt(), curUserId(), UtilElementType::Class, classId2Name(classIdGet(this)), funcName());
        #
        #
        #    start = e.selectionStartLine();
        #    end   = e.selectionEndLine();
        #    e.gotoLine(start);
        #    firstSym = strnfind(e.currentLine(), " ", 1, strlen(e.currentLine()));
        #    e.unmark();
        #    if (start > 1)
        #    {
        #        e.gotoLine(end + 1);
        #        e.gotoCol(1);
        #        e.insertLines(strrep(" ", firstSym - 1) + strfmt(#EndComment));
        #    }
        #    e.gotoLine(start);
        #    e.gotoCol(1);
        #    e.insertLines(strrep(" ", firstSym - 1) + strfmt(#StartComment));
        #    xSysLastValue::putValue([#CurrentVersion], curExt(), curUserId(), UtilElementType::Class,
        #                            classId2Name(classIdGet(this)), funcName());
        #}
      ENDSOURCE
      SOURCE #comments_SerjCMTIIHeader
        #public void comments_SerjCMTIIHeader(Editor e)
        #{
        #    e.unmark();
        #    e.gotoLine(1);
        #    e.gotoCol(1);
        #
        #    e.insertLines('// Serj - SR012610 - Commodity Trading II \n');
        #}
      ENDSOURCE
      SOURCE #documentation_HeaderTemplate
        #//AOSRunmode::Client
        #public void documentation_HeaderTemplate(Editor _editor)
        #{
        #    #TokenTypes
        #    #AOT
        #    #SysBPCheck
        #    #SysCompilerOutput
        #
        #    #define.startLine(2)
        #    #define.startColumn(5)
        #    #define.maxDialogString(800)
        #
        #    str source;
        #    str text;
        #    MemberFunction memberFunction = TreeNode::findNode(_editor.path());
        #    TreeNode parent = TreeNode::findNode(SysTreeNode::pathParent(_editor.path()));
        #    SysDictMethod sysDictMethod;
        #    int i;
        #    int symbol;
        #    SysScannerClass scanner;
        #    TreeNode exceptionNode;
        #    TreeNode exceptionValueNode;
        #    xRefTmpReferences tmpxRefReferences;       // the source, as the xRef sees it
        #    DictClass dictClass;
        #    ListEnumerator listEnum;
        #    str existingDoc;
        #
        #str formatXML(XML _xml)
        #{
        #    _xml = strReplace(_xml, '>', '>\n');
        #    _xml = strReplace(_xml, '<', '\n<');
        #
        #    _xml = strReplace(_xml, '\n<c>\n', '<c>');
        #    _xml = strReplace(_xml, '\n</c>\n', '</c>');
        #    _xml = strReplace(_xml, '\n\n', '\n');
        #
        #    return '\n'+_xml+'\n';
        #}
        #
        #    if (parent)
        #    {
        #        // Save to get latest source.
        #        parent.AOTsave();
        #
        #        source = memberFunction.AOTgetSource();
        #
        #        if (!strLen(source))
        #            return;
        #
        #        // Mark the memberfunction as dirty
        #        memberFunction.AOTsetSource(source);
        #    }
        #
        #    sysDictMethod = SysDictMethod::newMemberFunction(memberFunction);
        #
        #    if (sysDictMethod.compiledOk())
        #    {
        #        if (sysDictMethod.xmlDocumentationCanBeAutomated())
        #        {
        #            //
        #            // Truncate to max length
        #            //
        #            existingDoc = formatXml(sysDictMethod.xmlDocumentationAutomated());
        #            if (strLen(existingDoc) > #maxDialogString)
        #            {
        #                existingDoc = subStr(existingDoc, 1, #maxDialogString)+'\n...\n';
        #            }
        #
        #            if (Box::yesNo(strFmt("@SYS107202", existingDoc+'\n')+"@SYS107204", DialogButton::No, "@SYS107109") == DialogButton::No)
        #            {
        #                return;
        #            }
        #        }
        #        existingDoc = sysDictMethod.xmlDocumentationInherited();
        #
        #        if (existingDoc &&
        #            Box::yesNo(strFmt("@SYS327437", '\n'+existingDoc+'\n')+"@SYS107204", DialogButton::No, "@SYS107109") == DialogButton::No)
        #        {
        #            return;
        #        }
        #
        #        scanner = new SysScannerClass(memberFunction);
        #        infolog.updatexRefSet(this, true);
        #        memberFunction.AOTmakeXref(1);
        #        tmpxRefReferences = xRefCreate::makeTmp(infolog.lastxRef(), memberFunction.treeNodePath());
        #        infolog.updatexRefSet(this, false);
        #
        #        //
        #        // Insert summary
        #        //
        #        text = '/// <summary>\n/// \n/// </summary>\n';
        #
        #        //
        #        // Insert parameters
        #        //
        #        for (i=1; i<=sysDictMethod.parameterCnt(); i++)
        #        {
        #            if (!sysDictMethod.parameterName(i))
        #            {
        #                // BP Deviation documented
        #                throw error("@SYS107108", '', SysInfoAction_Formrun::newFormnameControlnameDesc(formStr(SysUserSetup), identifierStr(DebuggerPopupCombo), "@SYS321"));
        #            }
        #            text += strFmt('/// <param name="%1">\n/// \n/// </param>\n', sysDictMethod.parameterName(i));
        #        }
        #
        #        //
        #        // Insert returns
        #        //
        #        if (sysDictMethod.returnType() != Types::void &&
        #            sysDictMethod.name() != #MethodNameClassDeclaration)
        #        {
        #            text += '/// <returns>\n/// \n/// </returns>\n';
        #        }
        #
        #        //
        #        // Insert remarks
        #        //
        #        text += '/// <remarks>\n/// \n/// </remarks>\n';
        #
        #        //
        #        // Insert exceptions
        #        //
        #        if (scanner.symbolExists(#Throw_sym))
        #        {
        #            exceptionNode = TreeNode::findNode(#SystemEnumsPath+'\\'+enumStr(Exception));
        #            scanner.firstSymbol();
        #            symbol = scanner.nextSymbol();
        #            while (symbol)
        #            {
        #                while (symbol && symbol != #Throw_sym)
        #                {
        #                    symbol = scanner.nextSymbol();
        #                }
        #                if (symbol)
        #                {
        #                    symbol = scanner.nextSymbol();
        #                    if (scanner.string() == enumStr(Exception))
        #                    {
        #                        scanner.nextSymbol();
        #                        scanner.nextSymbol();
        #                    }
        #                    //
        #                    // Get right casing
        #                    //
        #                    exceptionValueNode = exceptionNode.AOTfindChild(scanner.string());
        #                    if (exceptionValueNode)
        #                    {
        #                        text += strFmt('/// <exception cref="Exception::%1">\n/// \n/// </exception>\n', exceptionValueNode.treeNodeName());
        #                    }
        #                }
        #            }
        #        }
        #
        #        //
        #        // Insert permission
        #        //
        #        dictClass = new DictClass(classNum(CodeAccessPermission));
        #        listEnum = dictClass.extendedBy().getEnumerator();
        #        while (listEnum.moveNext())
        #        {
        #            while select tmpxRefReferences
        #                where tmpxRefReferences.ParentId == listEnum.current()
        #                  && tmpxRefReferences.Name == methodStr(CodeAccessPermission, demand)
        #                  && tmpxRefReferences.Kind == xRefKind::ClassInstanceMethod
        #            {
        #                text += strFmt('/// <permission cref="%1">\n/// \n/// </permission>\n', classId2Name(listEnum.current()));
        #
        #                //
        #                // Only add each permission class once
        #                //
        #                break;
        #            }
        #        }
        #
        #        _editor.unmark();
        #        _editor.gotoLine(1);
        #        _editor.gotoCol(1);
        #        _editor.insertLines(text);
        #        _editor.gotoLine(#startLine);
        #        _editor.gotoCol(#startColumn);
        #    }
        #    else
        #    {
        #        throw error(strFmt("@SYS97041", 1, memberFunction.treeNodePath()));
        #    }
        #}
      ENDSOURCE
      SOURCE #getApplicableScripts
        #//
        #// System entry point
        #//
        #public container getApplicableScripts(Editor _editor)
        #{
        #    TreeNode aotNode = EditorScripts::getApplObjectNode(_editor);
        #    DictClass dictClass = new DictClass(classNum(EditorScripts));
        #    DictMethod dictMethod;
        #    int i;
        #    container scripts;
        #
        #    //
        #    // Insert menu items
        #    //
        #    for (i = 1; i <= dictClass.objectMethodCnt(); i++)
        #    {
        #        dictMethod = dictClass.objectMethodObject(i);
        #        if (this.isApplicableMethod(dictMethod, aotNode))
        #        {
        #            scripts += dictMethod.name();
        #        }
        #    }
        #
        #    return scripts;
        #}
      ENDSOURCE
      SOURCE #isApplicableMethod
        #//
        #// Use this method to control what scripts are shown on the scripts popup menu in the editor
        #//
        #protected boolean isApplicableMethod(DictMethod _dictMethod, TreeNode _aotNode)
        #{
        #    #TreenodeSysNodeType
        #    //
        #    // Only one parameter of type Editor
        #    // Must be public
        #    // Must return void
        #    //
        #    if (_dictMethod.parameterCnt() != 1 ||
        #        _dictMethod.parameterType(1) != Types::Class ||
        #        _dictMethod.parameterId(1) != classNum(Editor) ||
        #        _dictMethod.accessSpecifier() != AccessSpecifier::public ||
        #        _dictMethod.returnType() != Types::void)
        #    {
        #        return false;
        #    }
        #
        #    switch (_dictMethod.name())
        #    {
        #        //
        #        // Editor scripts that does not apply to Macros
        #        //
        #        case methodStr(EditorScripts, template_database_whileSelect):
        #        case methodStr(EditorScripts, template_flow_do):
        #        case methodStr(EditorScripts, template_flow_if):
        #        case methodStr(EditorScripts, template_flow_ifElse):
        #        case methodStr(EditorScripts, template_flow_else):
        #        case methodStr(EditorScripts, template_flow_switch):
        #        case methodStr(EditorScripts, template_flow_try):
        #        case methodStr(EditorScripts, template_flow_for):
        #        case methodStr(EditorScripts, template_flow_while):
        #            if (_aotNode &&
        #                _aotNode.treeNodeType().id() != #NT_MCRCODE)
        #            {
        #                return true;
        #            }
        #            return false;
        #
        #        //
        #        // Editor scripts that does not apply to Macros and Jobs
        #        //
        #        case methodStr(EditorScripts, template_method_construct):
        #        case methodStr(EditorScripts, template_method_edit):
        #        case methodStr(EditorScripts, template_method_editWithClass):
        #        case methodStr(EditorScripts, template_method_main):
        #        case methodStr(EditorScripts, template_method_parm):
        #        case methodStr(EditorScripts, documentation_HeaderTemplate):
        #            if (_aotNode &&
        #                _aotNode.treeNodeType().id() != #NT_MCRCODE &&
        #                _aotNode.treeNodeType().id() != #NT_XALCODE)
        #            {
        #                return true;
        #            }
        #            return false;
        #    }
        #
        #    return true;
        #}
        #
      ENDSOURCE
      SOURCE #LAST_classHeader
        #void LAST_classHeader(Editor editor)
        #{
        #    xppSource xppSource = new xppSource(editor.columnNo());
        #    Source template = xppSource.classHeader();
        #    ;
        #    editor.insertLines(template);
        #}
      ENDSOURCE
      SOURCE #LAST_comment
        #void LAST_comment(Editor editor)
        #{
        #    xppSource xppSource = new xppSource(editor.columnNo());
        #    Source template = xppSource.comment();
        #    ;
        #    editor.insertLines(template);
        #}
      ENDSOURCE
      SOURCE #LAST_functionHeader
        #void LAST_functionHeader(Editor editor)
        #{
        #    xppSource xppSource = new xppSource(editor.columnNo());
        #    Source template = xppSource.functionHeader();
        #    ;
        #    editor.insertLines(template);
        #}
        #
      ENDSOURCE
      SOURCE #ModuleRelease_InsertTemplate
        #//09 Apr 2010 at 09:31:32 by Rayson
        #public void ModuleRelease_InsertTemplate(Editor _editor)
        #{
        #    Dialog      dialog  = new Dialog('Insert Service Request No');
        #    DialogField dlgSR   = dialog.addField(extendedtypestr(num),'Service Request No');
        #    num         srNo;
        #    ;
        #
        #    if(dialog.run())
        #    {
        #        srNo = dlgSR.value();
        #
        #        _editor.unmark();
        #        _editor.insertLines(strfmt('    TmpReleaseControl.ServiceReqId  = \'%1\';\n',srNo));
        #        _editor.insertLines(strfmt('    TmpReleaseControl.StartDate     = str2date(\'%1\',-1);\n',SystemDateGet()));
        #        _editor.insertLines('    TmpReleaseControl.ChangeDate    = str2date(\' \',-1);\n');
        #        _editor.insertLines('    TmpReleaseControl.ServReqDesc   = \' \';\n');
        #        _editor.insertLines(strfmt('    TmpReleaseControl.ChangedBy     = \'%1\';\n',curuserId()));
        #        _editor.insertLines('    TmpReleaseControl.ReviewDate    = str2date(\' \',-1);\n');
        #        _editor.insertLines('    TmpReleaseControl.ReviewedBy    = \' \';\n');
        #        _editor.insertLines('    TmpReleaseControl.insert();\n');
        #    }
        #}
      ENDSOURCE
      SOURCE #ModuleRelease_InsertVarUpdate
        #//21 Apr 2010 at 09:31:32 by Rayson
        #public void ModuleRelease_InsertVarUpdate(Editor _editor)
        #{
        #    ;
        #
        #    _editor.unmark();
        #    _editor.insertLines(strfmt('    TmpReleaseControl.ServiceReqId  = \'%1\';\n','******'));
        #    _editor.insertLines(strfmt('    TmpReleaseControl.StartDate     = str2date(\'%1\',-1);\n',SystemDateGet()));
        #    _editor.insertLines(strfmt('    TmpReleaseControl.ChangeDate    = str2date(\'%1\',-1);\n',SystemDateGet()));
        #    _editor.insertLines('    TmpReleaseControl.ServReqDesc   = \'****** VAR UPDATE ******\';\n');
        #    _editor.insertLines(strfmt('    TmpReleaseControl.ChangedBy     = \'%1\';\n',curuserId()));
        #    _editor.insertLines('    TmpReleaseControl.ReviewDate    = str2date(\' \',-1);\n');
        #    _editor.insertLines('    TmpReleaseControl.ReviewedBy    = \' \';\n');
        #    _editor.insertLines('    TmpReleaseControl.insert();\n');
        #}
      ENDSOURCE
      SOURCE #sendTo_file
        #public void sendTo_file(Editor  e)
        #{
        #    Filename filename;
        #    TextIo io;
        #    int i = strFind(e.path(), '\\', strLen(e.path()), -strLen(e.path()));
        #    str defaultName = subStr(e.path(), i+1, strLen(e.path()));
        #    ;
        #    filename = WinAPI::getSaveFileName(0, ['Text','*.txt'], '', "@SYS56237", 'txt', defaultName );
        #    if (filename)
        #    {
        #        // BP deviation documented
        #        io = new TextIo(filename, 'W', 65001); // Write the file in UTF8
        #        io.write(EditorScripts::getSelectedText(e));
        #    }
        #}
      ENDSOURCE
      SOURCE #sendTo_mailRecipient
        #public void sendTo_mailRecipient(Editor e)
        #{
        #    SysINetMail mail = new SysINetMail();
        #    mail.sendMail('',e.path(),EditorScripts::getSelectedText(e),true);
        #}
      ENDSOURCE
      SOURCE #template_database_whileSelect
        #public void template_database_whileSelect(Editor editor)
        #{
        #    xppSource xppSource = new xppSource(editor.columnNo());
        #    int currentLine = editor.currentLineNo();
        #    int currentCol = editor.columnNo();
        #
        #    editor.insertLines(xppSource.whileSelect());
        #
        #    editor.gotoLine(currentLine+1);
        #    editor.gotoCol(currentCol+15);
        #
        #}
      ENDSOURCE
      SOURCE #template_flow_do
        #public void template_flow_do(Editor editor)
        #{
        #    xppSource xppSource = new xppSource(editor.columnNo());
        #    int currentLine = editor.currentLineNo();
        #    int currentCol = editor.columnNo();
        #
        #    editor.insertLines(xppSource.doWhile());
        #
        #    editor.gotoLine(currentLine+3);
        #    editor.insertString(strRep(' ', 4+currentCol));
        #}
        #
      ENDSOURCE
      SOURCE #template_flow_else
        #public void template_flow_else(Editor editor)
        #{
        #    xppSource xppSource = new xppSource(editor.columnNo());
        #    int currentLine = editor.currentLineNo();
        #    int currentCol = editor.columnNo();
        #    Source template = xppSource.elseBlock();
        #
        #    editor.insertLines(template);
        #    editor.gotoLine(currentLine+3);
        #    editor.gotoCol(currentCol+5);
        #}
      ENDSOURCE
      SOURCE #template_flow_for
        #public void template_flow_for(Editor editor)
        #{
        #    xppSource xppSource = new xppSource(editor.columnNo());
        #    int currentLine = editor.currentLineNo();
        #    int currentCol = editor.columnNo();
        #
        #    editor.insertLines(xppSource.for());
        #    editor.gotoLine(currentLine+1);
        #    editor.gotoCol(currentCol+6);
        #}
        #
      ENDSOURCE
      SOURCE #template_flow_if
        #public void template_flow_if(Editor editor)
        #{
        #    xppSource xppSource = new xppSource(editor.columnNo());
        #    int currentLine = editor.currentLineNo();
        #    int currentCol = editor.columnNo();
        #    Source template = xppSource.if();
        #
        #    editor.insertLines(template);
        #    editor.gotoLine(currentLine+1);
        #    editor.gotoCol(currentCol+5);
        #}
      ENDSOURCE
      SOURCE #template_flow_ifElse
        #public void template_flow_ifElse(Editor editor)
        #{
        #    xppSource xppSource = new xppSource(editor.columnNo());
        #    int currentLine = editor.currentLineNo();
        #    int currentCol = editor.columnNo();
        #
        #    editor.insertLines(xppSource.ifElse());
        #
        #    editor.gotoLine(currentLine+1);
        #    editor.gotoCol(currentCol+5);
        #}
      ENDSOURCE
      SOURCE #template_flow_switch
        #public void template_flow_switch(Editor editor)
        #{
        #    xppSource xppSource = new xppSource(editor.columnNo());
        #    int currentLine = editor.currentLineNo();
        #    int currentCol = editor.columnNo();
        #
        #    editor.insertLines(xppSource.switch());
        #    editor.gotoLine(currentLine+1);
        #    editor.gotoCol(currentCol+9);
        #
        #}
        #
      ENDSOURCE
      SOURCE #template_flow_try
        #public void template_flow_try(Editor editor)
        #{
        #    xppSource xppSource = new xppSource(editor.columnNo());
        #    int currentLine = editor.currentLineNo();
        #    int currentCol = editor.columnNo();
        #
        #    editor.insertLines(xppSource.tryCatch());
        #    editor.gotoLine(currentLine+3);
        #    editor.insertString(strRep(' ', 4+currentCol));
        #}
        #
      ENDSOURCE
      SOURCE #template_flow_while
        #public void template_flow_while(Editor editor)
        #{
        #    xppSource xppSource = new xppSource(editor.columnNo());
        #    int currentLine = editor.currentLineNo();
        #    int currentCol = editor.columnNo();
        #
        #    editor.insertLines(xppSource.while());
        #
        #    editor.gotoLine(currentLine+1);
        #    editor.gotoCol(currentCol+8);
        #}
        #
      ENDSOURCE
      SOURCE #template_insertSystemDateGet
        #//01 Oct 2010 at 15:34:51 by Rayso
        #public void template_insertSystemDateGet(Editor _editor)
        #{
        #    ;
        #    _editor.insertLines('systemDateGet()');
        #}
      ENDSOURCE
      SOURCE #template_method_construct
        #public void template_method_construct(Editor editor)
        #{
        #    xppSource       xppSource         = new xppSource();
        #    Dialog          dialog;
        #    DialogField     dlgClassTypeName;
        #    Source          template;
        #    str             path = editor.path();
        #    TreeNode        treeNode = path ? TreeNode::findNode(path) : null;
        #    className       className;
        #    #TreeNodeSysNodeType
        #
        #    if (treeNode)
        #    {
        #        treeNode = treeNode.AOTparent();
        #        if (treeNode && treeNode.treeNodeType().id() == #NT_CLASS)
        #        {
        #            className = treeNode.treeNodeName();
        #        }
        #    }
        #
        #    if (!className)
        #    {
        #        dialog = new Dialog("@SYS73363");
        #        dlgClassTypeName = dialog.addField(extendedTypeStr(className));
        #        if (!dialog.run())
        #        {
        #            return;
        #        }
        #        className = dlgClassTypeName.value();
        #    }
        #
        #    if (className)
        #    {
        #        template = xppSource.constructMethod(className);
        #
        #        editor.insertLines(template);
        #    }
        #}
      ENDSOURCE
      SOURCE #template_method_edit
        #public void template_method_edit(Editor editor)
        #{
        #    xppSource       xppSource       = new xppSource();
        #    Dialog          dialog          = new Dialog("@SYS69534");
        #    DialogField     dlgExtTypeName  = dialog.addField(extendedTypeStr(extendedDataTypeName));
        #    DialogField     dlgTablename    = dialog.addField(extendedTypeStr(tableName));
        #    DialogField     dlgName         = dialog.addField(extendedTypeStr(SysElementName),"@SYS62312","@SYS62313");
        #    Source          template;
        #;
        #    if (dialog.run())
        #    {
        #        template = xppSource.editMethod(dlgExtTypeName.value(),dlgTablename.value(),dlgName.value());
        #
        #        editor.insertLines(template);
        #    }
        #}
      ENDSOURCE
      SOURCE #template_method_editWithClass
        #public void template_method_editWithClass(Editor editor)
        #{
        #    xppSource       xppSource       = new xppSource(4);
        #    Dialog          dialog          = new Dialog("@SYS63066");
        #    DialogField     dlgExtTypeName  = dialog.addField(extendedTypeStr(extendedDataTypeName));
        #    DialogField     dlgName         = dialog.addField(extendedTypeStr(SysElementName),"@SYS62312","@SYS63067");
        #    DialogField     dlgClassname    = dialog.addField(extendedTypeStr(className),"@SYS24724","@SYS63068");
        #    DialogField     dlgMethod       = dialog.addField(extendedTypeStr(SysElementName),"@SYS26958","@SYS63070");
        #    Source          template;
        #;
        #    if (dialog.run())
        #    {
        #        template = xppSource.editMethodWithClass(dlgExtTypeName.value(),dlgName.value(),dlgClassname.value(),dlgMethod.value());
        #
        #        editor.insertLines(template);
        #    }
        #
        #}
      ENDSOURCE
      SOURCE #template_method_main
        #public void template_method_main(Editor editor)
        #{
        #    xppSource       xppSource = new xppSource(editor.columnNo());
        #    Source          template;
        #    int             currentLine = editor.currentLineNo();
        #    int             currentCol = editor.columnNo();
        #
        #    template = xppSource.mainMethod();
        #    editor.insertLines(template);
        #    editor.gotoLine(currentLine+3);
        #    editor.insertString(strRep(' ', 4+currentCol));
        #}
      ENDSOURCE
      SOURCE #template_method_parm
        #public void template_method_parm(Editor editor)
        #{
        #    xppSource       xppSource       = new xppSource();
        #    Dialog          dialog          = new Dialog("@SYS62311");
        #    DialogField     dlgExtTypeName  = dialog.addField(extendedTypeStr(extendedDataTypeName));
        #    DialogField     dlgName         = dialog.addField(extendedTypeStr(SysElementName),"@SYS62312","@SYS62313");
        #    Source          template;
        #;
        #    if (dialog.run())
        #    {
        #        template = xppSource.parmMethod(dlgExtTypeName.value(),dlgName.value());
        #
        #        editor.insertLines(template);
        #    }
        #}
      ENDSOURCE
      SOURCE #template_method_parmAttribute
        #public void template_method_parmAttribute(Editor editor)
        #{
        #    xppSource       xppSource       = new xppSource();
        #    Dialog          dialog          = new Dialog("@SYS62311");
        #    DialogField     dlgExtTypeName  = dialog.addField(extendedTypeStr(extendedDataTypeName));
        #    DialogField     dlgName         = dialog.addField(extendedTypeStr(SysElementName),"@SYS62312","@SYS62313");
        #    Source          template;
        #    str             attribute;
        #
        #    if (dialog.run())
        #    {
        #        template = xppSource.parmMethod(dlgExtTypeName.value(),dlgName.value());
        #        attribute = "[DataMemberAttribute(" + '"' + dlgName.value() +'"' + ")]" +'\n';
        #
        #        editor.insertLines(attribute);
        #        editor.insertLines(template);
        #    }
        #}
      ENDSOURCE
      SOURCE #transformSelection
        #private void transformSelection(Editor _editor, identifierName _transformation)
        #{
        #    str line;
        #    int i;
        #    int startLine = _editor.selectionStartLine();
        #    int endLine   = _editor.selectionEndLine();
        #    int startCol  = _editor.selectionStartCol(); //points at the first selected char
        #    int endCol    = _editor.selectionEndCol()-1; //points at the last selected char
        #    MarkMode markMode = _editor.markMode();
        #    #define.maxLineLength(300)
        #
        #str transform(str data)
        #{
        #    switch (_transformation)
        #    {
        #        case identifierStr('strlwr'):
        #            return strLwr(data);
        #
        #        case identifierStr('strupr'):
        #            return strUpr(data);
        #    }
        #    return data;
        #}
        #
        #void transformLine(int lineNo, int start, int end)
        #{
        #    _editor.gotoCol(0);
        #    _editor.gotoLine(lineNo);
        #    line = _editor.currentLine();
        #    line = subStr(line, 1, start-1) +
        #           transform(subStr(line, start, end-start+1)) +
        #           subStr(line, end+1, #maxLineLength);
        #
        #    _editor.deleteLines(1);
        #    _editor.insertLines(line+'\n');
        #    return;
        #}
        #;
        #    _editor.unmark();
        #
        #    switch (markMode)
        #    {
        #        case MarkMode::LineMark:
        #            _editor.gotoCol(1);
        #            for (i=startLine; i<=endLine; i++)
        #            {
        #                transformLine(i, 1, #maxLineLength);
        #            }
        #            break;
        #
        #        case MarkMode::ColMark:
        #            for (i=startLine; i<=endLine; i++)
        #            {
        #                transformLine(i, startCol, endCol);
        #            }
        #            break;
        #
        #        case MarkMode::AreaMark:
        #            if (startLine == endLine)
        #            {
        #                transformLine(startLine, startCol, endCol);
        #            }
        #            else
        #            {
        #                //convert first line
        #                transformLine(startLine, startCol, #maxLineLength);
        #
        #                //convert full lines
        #                for (i=startLine+1; i<endLine; i++)
        #                {
        #                    transformLine(i, 1, #maxLineLength);
        #                }
        #
        #                //convert last line
        #                transformLine(endLine, 1, endCol);
        #            }
        #            break;
        #    }
        #}
      ENDSOURCE
      SOURCE #Tribridge_InsertDevTag
        #Public void Tribridge_InsertDevTag(Editor editor)
        #{
        #    xppSource xppsource = new xppSource(editor.columnNo());
        #
        #    int     currentLine = editor.currentLineNo();
        #    int     currentCol  = editor.columnNo();
        #    Source  template = "// Tribrige - Project XXXXXXXXXXXXXXXX- By:" + curUserId() +"\n";
        #
        #    template += strRep(" ",currentCol) + "\n";
        #    template += strRep(" ",currentCol) + "// end  Tribrige Mod";
        #    editor.insertLines(template);
        #
        #}
      ENDSOURCE
      SOURCE #getApplObjectNode
        #protected static TreeNode getApplObjectNode(Editor _editor)
        #{
        #    TreeNode aotNode = TreeNode::findNode(_editor.path());
        #    return SysTreeNode::getRootElement(aotNode);
        #}
      ENDSOURCE
      SOURCE #getSelectedText
        #public static str getSelectedText(Editor e)
        #{
        #    int i;
        #    str text;
        #    str line;
        #    int startLine = e.selectionStartLine()+1;
        #    int endLine   = e.selectionEndLine()+1;
        #    int startCol  = e.selectionStartCol();
        #    int endCol    = e.selectionEndCol();
        #    ;
        #
        #    //Editor - 01 Oct 2010 at 10:01:29 by Rayso - Start
        #    if(endLine < startLine)
        #        endLine = startLine;
        #    //Editor - 01 Oct 2010 at 10:01:29 by Rayso - End
        #
        #    if (startLine == endLine && startCol == endCol)
        #    {
        #        e.firstLine();
        #        while (e.moreLines())
        #        {
        #            text += e.getLine()+'\r\n';
        #            e.nextLine();
        #        }
        #    }
        #    else
        #    {
        #        e.firstSelectedLine();
        #        for (i = startLine; i <= endLine; i++)
        #        {
        #            line = e.getLine();
        #            if (i == startLine && i == endLine)
        #            {
        #                line = substr(line, startcol, endCol-startCol);
        #            }
        #            else
        #            if (i == endLine)
        #            {
        #                line = substr(line, 1, endCol-1);
        #            }
        #            else
        #            if (i == startLine)
        #            {
        #                line = strrep(' ', startCol-1)+substr(line, startCol, strlen(line));
        #            }
        #
        #            text += line + '\r\n';
        #            e.nextSelectedLine();
        #        }
        #    }
        #    return text;
        #}
      ENDSOURCE
    ENDMETHODS
  ENDCLASS

***Element: CLS

; Microsoft Dynamics AX Class: Info unloaded
; --------------------------------------------------------------------------------
  CLSVERSION 1
  
  CLASS #Info
    PROPERTIES
      Name                #Info
      Extends             #xInfo
      Origin              #{2D04F004-0000-1000-496E-666F00000000}
      LegacyId            #61444
    ENDPROPERTIES
    
    METHODS
      SOURCE #activate
        #void activate(FormRun   formRun)
        #{
        #    if (formRun.name() != formstr(DocuView) &&
        #        formRun.name() != formstr(sysFormSearch)                // SP4
        #       )
        #    {
        #        this.setLastActivatedForm(formRun);
        #    }
        #
        #    if (SysTaskRecorderEventManager::parmRecording())
        #    {
        #        SysTaskRecorderGlobal::setGlobalProperty(#globalPropWarnOnFormActivate,true);
        #    }
        #}
      ENDSOURCE
      SOURCE #add
        #Exception add(
        #    Exception _exception,
        #    str _txt,
        #    str _helpUrl = '',
        #    Object _sysInfoAction = null,
        #    boolean buildprefix = true)
        #{
        #    int numOfLines,i;
        #    int actionClassId;
        #    container packedAction;
        #    xSession session;
        #    ;
        #    switch (logLevel)
        #    {
        #        case SysInfologLevel::None:
        #            return _exception;
        #        case SysInfologLevel::Warning:
        #            if (_exception == Exception::Info)
        #                return _exception;
        #            break;
        #        case SysInfologLevel::Error:
        #            if (_exception == Exception::Info || _exception == Exception::Warning)
        #                return _exception;
        #    }
        #    if (infologLine() > errorsPerBatch)
        #    {
        #        i = infologLine();
        #        while (!numEqualPrefixes && numOfLines <= errorsPerBatch && SysInfologMessageStruct::comparePrefix(conpeek(conpeek(this.copy(i,i),2),2)))
        #        {
        #            i--;
        #            numOfLines++;
        #        }
        #        if (numEqualPrefixes)
        #        {
        #            i = infologLine();
        #            if (SysInfologMessageStruct::comparePrefix(conpeek(conpeek(this.copy(i,i),2),2)))
        #            {
        #                numEqualPrefixes++;
        #            }
        #            else
        #            {
        #                numEqualPrefixes = 0;
        #            }
        #        }
        #        else
        #        {
        #            numEqualPrefixes = numOfLines;
        #        }
        #
        #        if (numEqualPrefixes > errorsPerBatch &&
        #           (_exception == Exception::Info || _exception == Exception::Warning || _exception == Exception::Error))
        #        {
        #            return _exception;
        #        }
        #    }
        #
        #    try
        #    {
        #        if (!_sysInfoAction && !_helpUrl && isSystemAdministrator() && isConfigurationkeyEnabled(configurationkeynum(SysDevelopmentMorphX)) /*hasSecuritykeyAccess(securitykeynum(SysDevelopment), AccessType::View)*/)
        #        {
        #            session = new xSession();
        #            if(session.clientKind() == ClientType::Client)
        #            {
        #                _sysInfoAction = SysInfoAction_Editor::newStack();
        #            }
        #        }
        #    }
        #    catch
        #    {
        #        return super(_exception, (buildprefix?getprefix():'')+_txt);
        #    }
        #
        #    if (_sysInfoAction && !_sysInfoAction.enabled()) //test access rights
        #    {
        #        _sysInfoAction = null;
        #    }
        #
        #    if (_helpUrl || _sysInfoAction)
        #    {
        #        if (_sysInfoAction)
        #        {
        #            packedAction  = _sysInfoAction.pack();
        #            actionClassId = classidget(_sysInfoAction);
        #        }
        #        else
        #        {
        #            packedAction  = connull();
        #            actionClassId = 0;
        #        }
        #
        #        this.addSysInfoAction(_helpUrl, actionClassId, packedAction);
        #    }
        #
        #    return super(_exception, (buildprefix?getprefix():'')+_txt);
        #}
      ENDSOURCE
      SOURCE #addSysInfoAction
        #void addSysInfoAction(
        #    str _helpUrl,
        #    int actionClassId,
        #    container action)
        #{
        #    tmpInfoTable.HelpUrl       = _helpUrl;
        #    tmpInfoTable.Action        = action;
        #    tmpInfoTable.ActionClassId = actionClassId;
        #
        #    tmpInfoTable.insert();
        #    tmpActionId[ infologLine() +1] = tmpInfoTable.RecId;
        #}
      ENDSOURCE
      SOURCE #addTimeOut
        #int addTimeOut(Object object, str methodName, int time, boolean idle = true)
        #{
        #    int hdl;
        #    Struct      valueStruct = new Struct('object caller;str method');
        #    ObjectIdent ident       = new ObjectIdent(object);
        #
        #    if (!setTimeOutMap)
        #        setTimeOutMap       = new Map(Types::Integer, Types::Class);
        #
        #    valueStruct.value('caller', ident);
        #    valueStruct.value('method', methodName);
        #
        #    hdl = this.setTimeOut(identifierstr(callTimeOut), time, idle);
        #    setTimeOutMap.insert(hdl, valueStruct);
        #    return hdl;
        #}
      ENDSOURCE
      SOURCE #autologOff
        #void autologOff()
        #{
        #    SysGlobalCache cache = appl.globalCache();
        #    ;
        #    cache.set(classstr(Info), identifierstr(Autologoff), true);
        #    this.shutDown(true);
        #
        #    // The shutdown may not be successful.  For instance, if the
        #    // user had pending changes the client may be prevented from
        #    // shutting down.  Restart the timer so it will fire again.
        #    this.startAutoLogoffTimer();
        #}
      ENDSOURCE
      SOURCE #breakpointForm
        #private FormRun breakpointForm(FormRun _form = null)
        #{
        #    #define.BreakpointForm('BreakpointForm')
        #    str mapOwner = #BreakpointForm;
        #    FormRun tempForm;
        #
        #    if (!prmisdefault(_form))
        #    {
        #        this.workspaceCache().set(mapOwner, 0, _form);
        #    }
        #
        #    if (this.workspaceCache().isSet(mapOwner, 0))
        #    {
        #       tempForm = this.workspaceCache().get(mapOwner, 0);
        #    }
        #    else
        #    {
        #       tempForm = null;
        #    }
        #
        #    return tempForm;
        #}
      ENDSOURCE
      SOURCE #breakpointFormClosed
        #private boolean breakpointFormClosed(boolean _closed = false)
        #{
        #    #define.BreakpointFormClosed('BreakpointFormClosed')
        #    str mapOwner = #BreakpointFormClosed;
        #    boolean closed;
        #
        #    if (!prmisdefault(_closed))
        #    {
        #        this.workspaceCache().set(mapOwner, 0, _closed);
        #    }
        #
        #    if (this.workspaceCache().isSet(mapOwner, 0))
        #    {
        #       closed = this.workspaceCache().get(mapOwner, 0);
        #    }
        #    else
        #    {
        #        closed = false;
        #    }
        #
        #    return closed;
        #}
      ENDSOURCE
      SOURCE #breakpointNotify
        #public void breakpointNotify(BreakpointNotify _notification)
        #{
        #    Object o;
        #    Args   args;
        #    FormRun formRun;
        #
        #    switch(_notification)
        #    {
        #        case BreakpointNotify::BreakpointForm:
        #            if (!this.breakpointForm() || this.breakpointFormClosed())
        #            {
        #                this.breakpointFormClosed(false);
        #
        #                args = new Args();
        #                args.name(formstr(SysBreakpoints));
        #                formRun = this.breakpointForm(classfactory.formRunClass(args));
        #                formRun.init();
        #                formRun.run();
        #            }
        #            else
        #            {
        #                this.breakpointForm().close();
        #            }
        #            break;
        #
        #        case BreakpointNotify::BreakpointChange:
        #            if (this.breakpointForm() && !this.breakpointFormClosed())
        #            {
        #                o = this.breakpointForm();
        #                o.updateListDelayed();
        #            }
        #            break;
        #    }
        #}
      ENDSOURCE
      SOURCE #browser
        #private FormRun browser(FormRun _browser = null)
        #{
        #    #define.Browser('InfoLogBrowser')
        #    str mapOwner = #Browser;
        #    FormRun browserForm;
        #
        #    if (!prmisdefault(_browser))
        #    {
        #        this.workspaceCache().set(mapOwner, 0, _browser);
        #    }
        #
        #    if (this.workspaceCache().isSet(mapOwner, 0))
        #    {
        #       browserForm = this.workspaceCache().get(mapOwner, 0);
        #    }
        #    else
        #    {
        #       browserForm = null;
        #    }
        #
        #    return browserForm;
        #}
      ENDSOURCE
      SOURCE #browserActionButton
        #private FormButtonControl browserActionButton()
        #{
        #    return this.browser().design().controlName('action');
        #}
      ENDSOURCE
      SOURCE #browserBottomGroup
        #private FormGroupControl browserBottomGroup()
        #{
        #    return this.browser().design().controlName('bottomgroup');
        #}
      ENDSOURCE
      SOURCE #browserCloseButton
        #private FormButtonControl browserCloseButton()
        #{
        #    return this.browser().design().controlName('close');
        #}
      ENDSOURCE
      SOURCE #browserCurrentError
        #private FormStaticTextControl browserCurrentError()
        #{
        #    return this.browser().design().controlName('currenterror');
        #}
      ENDSOURCE
      SOURCE #browserCurrentPicture
        #private FormWindowControl browserCurrentPicture()
        #{
        #    return this.browser().design().controlName('currentpicture');
        #}
      ENDSOURCE
      SOURCE #browserDeleteAll
        #private FormButtonControl browserDeleteAll()
        #{
        #    return this.browser().design().controlName('deleteall');
        #}
      ENDSOURCE
      SOURCE #browserErrorTree
        #private FormTreeControl browserErrorTree()
        #{
        #    return this.browser().design().controlName('errortree');
        #}
      ENDSOURCE
      SOURCE #browserHelpButton
        #private FormButtonControl browserHelpButton()
        #{
        #    return this.browser().design().controlName('help');
        #}
      ENDSOURCE
      SOURCE #browserImageList
        #private ImageListAppl_Infolog browserImageList()
        #{
        #    Object object;
        #;
        #    object = this.browser();
        #    return object.imagelist();
        #}
      ENDSOURCE
      SOURCE #browserInfoText
        #private FormStringControl browserInfoText()
        #{
        #    return this.browser().design().controlName('InfoText');
        #}
      ENDSOURCE
      SOURCE #browserResizedOnce
        #private boolean browserResizedOnce(boolean _resizedOnce = false)
        #{
        #    #define.BrowserResizedOnce('InfoLogBrowserResizedOnce')
        #    str mapOwner = #BrowserResizedOnce;
        #    boolean sizedOnce;
        #
        #    if (!prmisdefault(_resizedOnce))
        #    {
        #        this.workspaceCache().set(mapOwner, 0, _resizedOnce);
        #    }
        #
        #    if (this.workspaceCache().isSet(mapOwner, 0))
        #    {
        #       sizedOnce = this.workspaceCache().get(mapOwner, 0);
        #    }
        #    else
        #    {
        #        sizedOnce = false;
        #    }
        #
        #    return sizedOnce;
        #}
      ENDSOURCE
      SOURCE #browserTopGroup
        #private FormGroupControl browserTopGroup()
        #{
        #    return this.browser().design().controlName('topgroup');
        #}
      ENDSOURCE
      SOURCE #browserTreeGroup
        #private FormGroupControl browserTreeGroup()
        #{
        #    return this.browser().design().controlName('treegroup');
        #}
      ENDSOURCE
      SOURCE #callTimeOut
        #private void callTimeOut()
        #{
        #    Struct      valueStruct;
        #    ObjectIdent ident;
        #    Object      obj;
        #    str         method;
        #    DictClass   dictClass;
        #    int         hdl = this.getTimeOutTimerHandle();
        #
        #    if (setTimeOutMap.exists(hdl))
        #    {
        #        valueStruct = setTimeOutMap.lookup(hdl);
        #        ident       = valueStruct.value('caller');
        #        method      = valueStruct.value('method');
        #
        #        obj = ident.object();
        #        if (obj)
        #        {
        #            setTimeOutMap.remove(hdl);
        #            dictClass = new DictClass(classidget(obj));
        #
        #            // callTimeOut is called from addTimeOut which in turn is called only from client classes.
        #
        #            // BP deviation documented
        #            dictClass.callObject(method,obj);
        #        }
        #    }
        #}
      ENDSOURCE
      SOURCE #canShowCreateRuleMenuItem
        #public boolean canShowCreateRuleMenuItem(FormRun _caller)
        #{
        #    return EventRule::canShowCreateRuleMenuItem(_caller);
        #}
      ENDSOURCE
      SOURCE #canShutdown
        #public boolean canShutdown(boolean _silent)
        #{
        #    boolean ret;
        #;
        #    DocuFileWatchDog::openFiles(_silent);
        #
        #    ret = super(_silent);
        #
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #canUpdateView
        #boolean canUpdateView()
        #{
        #    // COM Object/Server
        #    if (!hasGUI())
        #        return false;
        #
        #    // Most common situation
        #    if (! updateViewObj)
        #        return true;
        #
        #    // Object is dead, so okay to view
        #    if (! updateViewObj.object())
        #        return true;
        #
        #    // It's alive so no update
        #    return false;
        #}
      ENDSOURCE
      SOURCE #canUpdatexRef
        #boolean canUpdatexRef()
        #{   ;
        #    // Most common situation
        #    if (!updatexRefObj)
        #        return true;
        #
        #    // Object is dead, so okay to update
        #    if (!updatexRefObj.object())
        #        return true;
        #
        #    // It's alive, so no update
        #    return false;
        #}
      ENDSOURCE
      SOURCE #canViewAlertInbox
        #public boolean canViewAlertInbox()
        #{
        #    boolean ret;
        #    ;
        #
        #    if(alreadySetCanViewAlertInbox)
        #    {
        #        return canViewAlertInboxValue;
        #    }
        #
        #    ret = SysDictMenu::isMenuFunctionVisible(
        #        new MenuFunction(menuitemdisplaystr(EventAlertInbox), MenuItemType::Display));
        #
        #    canViewAlertInboxValue = ret;
        #    alreadySetCanViewAlertInbox = true;
        #
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #checkForTimeZoneMismatch
        #void checkForTimeZoneMismatch()
        #{
        #    #ResAppl
        #    #define.cancelButton      ('CancelButton')
        #    #define.DialogClassName   ('Dialog')
        #    #define.IconControl       ('Icon')
        #    #define.MessageTextControl('MessageText')
        #    #define.CheckBoxControl   ('CheckBox')
        #    #define.MessageGroup      ('MessageGroup')
        #    #define.OptionGroup       ('OptionGroup')
        #
        #    Dialog dlg;
        #    UserInfo userInfo;
        #
        #    FormBuildGroupControl fbMainGroup;
        #    FormBuildGroupControl fbMessageGroup;
        #    FormBuildGroupControl fbOptionGroup;
        #
        #    FormBuildWindowControl        fbIcon;
        #    FormBuildStaticTextControl    fbMessage;
        #    FormBuildCheckBoxControl      fbCheckbox;
        #    FormBuildCommandButtonControl fbButton;
        #
        #    FormCheckBoxControl           checkbox;
        #    ;
        #
        #    if (clientKind() == ClientType::Client)
        #    {
        #        userInfo = xUserInfo::find(true, curuserid());
        #        if (userInfo && userInfo.NotifyTimeZoneMismatch)
        #        {
        #            if (xSession::isUserPreferredTzSameAsLocalMachine() == false)
        #            {
        #                // Time zone mismatch
        #                dlg = new Dialog("@SYS113344");
        #                dlg.formBuildDesign().setCompany(false);
        #
        #                fbMainGroup = dlg.mainFormGroup();
        #
        #                fbMessageGroup = fbMainGroup.addControl(FormControlType::Group, #MessageGroup);
        #                fbMessageGroup.frameType(FormFrameType::None);
        #                fbMessageGroup.columns(2);
        #
        #                fbOptionGroup = fbMainGroup.addControl(FormControlType::Group, #OptionGroup);
        #                fbOptionGroup.frameType(FormFrameType::None);
        #                fbOptionGroup.leftMode(FormLeft::AutoRight);
        #
        #                fbIcon = fbMessageGroup.addControl(FormControlType::Image, #IconControl);
        #                fbIcon.imageResource(#ImageInfoLarge);
        #                fbIcon.backStyle(FormBackStyle::Transparent);
        #                fbIcon.backgroundColor(WindowsPalette::ButtonFace3D);
        #                fbIcon.left(0);
        #
        #                // The local machine time zone does not match your preferred time zone settings.
        #                fbMessage = fbMessageGroup.addControl(FormControlType::StaticText, #MessageTextControl);
        #                fbMessage.text("@SYS113345");
        #                fbMessage.topMode(0);
        #                fbMessage.topValue(10);
        #
        #
        #                // Do not notify me again
        #                fbCheckbox = fbOptionGroup.addControl(FormControlType::CheckBox, #CheckBoxControl);
        #                fbCheckbox.leftMode(FormLeft::RightEdge);
        #                fbCheckbox.label("@SYS113346");
        #
        #                fbButton = dlg.dialogForm().buildDesign().control(#cancelButton);
        #                fbButton.visible(false);
        #
        #                dlg.run();
        #                dlg.wait();
        #
        #                if (dlg.closedOk())
        #                {
        #                    checkbox = dlg.formRun().design().controlName(#CheckBoxControl);
        #                    if (checkbox.value())
        #                    {
        #                        userInfo.NotifyTimeZoneMismatch = false;
        #                        ttsbegin;
        #                        userInfo.update();
        #                        ttscommit;
        #                    }
        #                }
        #            }
        #        }
        #    }
        #}
      ENDSOURCE
      SOURCE #checkStartupCompany
        #void checkStartupCompany()
        #{
        #    ;
        #    Info::checkStartupCompany_Server(curext(), curuserid());
        #}
      ENDSOURCE
      SOURCE #classDeclaration
        #// This is a framework class. Customizing this class may cause problems with future upgrades to the software.
        #final class Info extends xInfo
        #{
        #    #SysTaskRecorderMacro
        #
        #    ObjectIdent         docuView;
        #    ObjectIdent         lastActivatedForm;
        #
        #    str                 errorDescription;
        #    int                 imageResource;
        #    recId               tmpActionId[];
        #    int                 treeId[];
        #    int                 offsetSeq;
        #    SysInfolog          tmpInfoTable;
        #
        #    boolean             updateCalled;
        #    boolean             unused;
        #    int                 treeItems;
        #    TmpInfolog          tmpInfolog;
        #    int                 firstPrefix;
        #    int                 sequenceCounter;
        #
        #    boolean             doxRefCreate;
        #    boolean             hasPrefix;
        #
        #    ObjectIdent         updateViewObj;          // Update of info. log
        #
        #    str 255             urlLookup;
        #    int                 errorsPerBatch;
        #    boolean             emptyTmpInfologCalled;
        #
        #    boolean             docuHandlingActive;
        #    boolean             docuToolbarButtonActive;
        #    Docu                docu;
        #
        #    xRef                    lastxRef;
        #    ObjectIdent             updatexRefObj;          // Update of xRef. Can be temporarely canceled
        #    Exception               maxException;
        #    ImageListAppl_Infolog   imagelist;
        #    ObjectIdent             infoActionObject;          // Update of info. log
        #    int                     numEqualPrefixes;
        #
        #    ProfileManager          profileMgr;
        #
        #    // Multipurpose cache used e.g. for imagelists and Forms security setup
        #    SysGlobalCache          globalCache;
        #    #define.watchdogInterval(15*60*1000)
        #    Map                     setTimeOutMap;
        #
        #    // Map that contains a separate SysGlobalCache for each workspace window
        #    Map                     workspaceCacheMap;
        #
        #    SysOperationProgressForm operationProgress;
        #    SysInfologLevel     loglevel;
        #
        #    // Generating PDF fonts is very time consuming, so we keep a cache global here, Axapta 4.0#41749.
        #    SysPDFFontCache         pdfFontCache;
        #
        #    boolean                 alreadySetCanViewAlertInbox;
        #    boolean                 canViewAlertInboxValue;
        #
        #    #Define.CurrentVersion(1)
        #
        #    #define.PropertyString("Property")
        #}
      ENDSOURCE
      SOURCE #clear
        #/*
        #    This is overridden to ensure that the number of lines left are considered at each usage.
        #    Do not call this with 0 (zero) unless you are sure no one else has put valuable information
        #    into the infolog system.
        #
        #    Use this pattern to clear the infolog cache:
        #
        #    int line = infolog.line();
        #    try
        #    {
        #        //
        #    }
        #    catch
        #    {
        #        infolog.clear(line);
        #    }
        #*/
        #public void clear(int _linesLeft = 0)
        #{
        #    int i;
        #
        #    if (_linesLeft)
        #    {
        #        for (i=_linesLeft+1; i<= infologLine() ; i++)
        #        {
        #            tmpActionId[i] = 0;
        #        }
        #    }
        #    else
        #    {
        #        // Delete all
        #        tmpActionId[0] = 0;
        #    }
        #    super(_linesLeft);
        #}
      ENDSOURCE
      SOURCE #clearBreakpointForm
        #void clearBreakpointForm()
        #{
        #    this.breakpointFormClosed(true);
        #}
      ENDSOURCE
      SOURCE #clearBrowser
        ##resource
        #void clearBrowser()
        #{
        #    treeItems = 0;
        #    tmpInfoTable = null;
        #    tmpInfoTable.recordLevelSecurity(true);
        #    //BP deviation documented
        #    tmpInfoTable.setTmp();
        #    tmpActionId[0] = 0; //clear array
        #
        #    if (this.browser())
        #    {
        #        this.browserInfoText().text('');
        #        this.browserErrorTree().deleteAll();
        #        this.browserCurrentError().text('');
        #        this.browserCurrentPicture().imageResource(#RES_INFOLOG_L_INFO);
        #        maxException = Exception::Info;
        #    }
        #    this.emptyTmpInfolog();
        #}
      ENDSOURCE
      SOURCE #close
        #void close(FormRun formRun)
        #{
        #    if (lastActivatedForm && lastActivatedForm.object() == formRun)
        #        lastActivatedForm   = null;
        #
        #    if (! docuView)
        #        return;
        #
        #    if (formRun.name() != formstr(DocuView))
        #        return;
        #
        #    docuView            = null;
        #    lastActivatedForm   = null;
        #}
      ENDSOURCE
      SOURCE #closeInfolog
        #public void closeInfolog(int _delayedInMS = 0)
        #{
        #;
        #    if (_delayedInMS)
        #    {
        #        this.setTimeOut(methodstr(Info, closeInfologDelayed), _delayedInMS, true);
        #    }
        #    else
        #    {
        #        this.closeInfologDelayed();
        #    }
        #}
      ENDSOURCE
      SOURCE #closeInfologDelayed
        #private void closeInfologDelayed()
        #{
        #;
        #    //
        #    // CanClose() will set visible to false on the infolog browser form
        #    //
        #    if (this.browser().canClose())
        #    {
        #        this.browser().close();
        #    }
        #}
      ENDSOURCE
      SOURCE #collectESignature
        #/// <summary>
        #///    Indicates whether the Electronic Signature should be collected for the specified <c>databaseLog</c>
        #///    type and record.
        #/// </summary>
        #/// <param name="_logType">
        #///    The parameter is the log type for the database log type.
        #/// </param>
        #/// <param name="_record">
        #///    The parameter is the record of the calling method.
        #/// </param>
        #/// <returns>
        #///    true is signature needs to be collected; otherwise, false.
        #/// </returns>
        #boolean collectESignature(DatabaseLogType _logType, Common _record)
        #{
        #    boolean ret = true;
        #    ;
        #
        #    //info("ESignature required for table " + tableid2name(_record.TableId) + " for " + enum2str(_logType) + " operation");
        #    if (!SIGBaseDocument::checkAndCache(_logType,_record))
        #    {
        #        ret = checkFailed("@SYS138056");
        #    }
        #
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #connectorSessionStart
        #/*
        #No SYS code must exist in this method
        #*/
        #void connectorSessionStart()
        #{
        #}
      ENDSOURCE
      SOURCE #connectorSessionStop
        #/*
        #No SYS code must exist in this method
        #*/
        #void connectorSessionStop()
        #{
        #}
      ENDSOURCE
      SOURCE #copy
        #public container copy(int _from, int _to)
        #{
        #    int i;
        #    InfologData systemData;
        #    InfologData returnData;
        #
        #    systemData = super(_from, _to);
        #    if (conlen(systemData))
        #    {
        #        returnData = [[#CurrentVersion]];
        #
        #        for (i=1; i<=conlen(systemData); i+=2)
        #        {
        #            if (tmpActionId[_from+(i div 2)])
        #            {
        #                select firstonly tmpInfoTable
        #                    where tmpInfoTable.RecId == tmpActionId[_from+(i div 2)];
        #
        #                returnData += [[conpeek(systemData, i), conpeek(systemData, i+1), tmpInfoTable.HelpUrl, tmpInfoTable.ActionClassId, tmpInfoTable.Action]];
        #            }
        #            else
        #            {
        #                returnData += [[conpeek(systemData, i), conpeek(systemData, i+1)]];
        #            }
        #        }
        #    }
        #    return returnData;
        #}
      ENDSOURCE
      SOURCE #cut
        #public container cut(int _from = 1, int _to = infologLine())
        #{
        #    int i;
        #    int lines = this.num();
        #    InfologData systemData;
        #    InfologData returnData;
        #
        #    systemData = super(_from, _to);
        #    returnData = [[#CurrentVersion]];
        #    for (i=1; i<=conlen(systemData); i+=2)
        #    {
        #        if (tmpActionId[_from+(i div 2)])
        #        {
        #            select firstonly tmpInfoTable
        #                where tmpInfoTable.RecId == tmpActionId[_from+(i div 2)];
        #
        #            returnData += [[conpeek(systemData, i), conpeek(systemData, i+1), tmpInfoTable.HelpUrl, tmpInfoTable.ActionClassId, tmpInfoTable.Action]];
        #        }
        #        else
        #        {
        #            returnData += [[conpeek(systemData, i), conpeek(systemData, i+1)]];
        #        }
        #    }
        #
        #    for (i=0; i<=lines-_to+1; i++)
        #        tmpActionId[_from+i] = tmpActionId[_to+i+1];
        #
        #    return returnData;
        #}
      ENDSOURCE
      SOURCE #docu
        #Docu    docu()
        #{
        #    return docu;
        #}
      ENDSOURCE
      SOURCE #docuHandlingActive
        #boolean docuHandlingActive(boolean _docuHandlingActive = docuHandlingActive)
        #{
        #    ;
        #    docuHandlingActive = _docuHandlingActive;
        #
        #    return docuHandlingActive;
        #
        #}
      ENDSOURCE
      SOURCE #docuInit
        #void docuInit()
        #{
        #;
        #    docu = new Docu();
        #}
      ENDSOURCE
      SOURCE #doxRefCreate
        #boolean doxRefCreate(boolean _doxRefCreate = doxRefCreate)
        #{
        #    doxRefCreate = _doxRefCreate;
        #    return doxRefCreate;
        #}
      ENDSOURCE
      SOURCE #emptyTmpInfolog
        #void emptyTmpInfolog(boolean resetErrorsPerBatch = true)
        #{
        #    ;
        #    tmpInfoLog            = null;
        #    sequenceCounter       = 0;
        #    offsetSeq             = 1;
        #    if (resetErrorsPerBatch)
        #        errorsPerBatch        = maxint()-1;
        #    numEqualPrefixes     = 0;
        #    emptyTmpInfologCalled = false;
        #}
      ENDSOURCE
      SOURCE #errorsPerBatch
        #int errorsPerBatch(int number = errorsPerBatch)
        #{
        #    if (number)
        #        errorsPerBatch = number;
        #    else
        #        errorsPerBatch = maxint();
        #
        #    return errorsPerBatch;
        #}
      ENDSOURCE
      SOURCE #eventAlertInit
        #void eventAlertInit()
        #{
        #    SysGlobalCache cache                    = infolog.globalCache();
        #    EventAlertPoller alertPoller            = EventAlertPoller::newAlertPoller(false);
        #    EventDrillDownPoller drillDownPoller    = EventDrillDownPoller::construct();
        #;
        #    cache.set(classstr(EventAlertPoller), literalstr(ReferenceId), alertPoller, false);
        #    cache.set(classstr(EventDrillDownPoller), literalstr(ReferenceId), drillDownPoller, false);
        #}
      ENDSOURCE
      SOURCE #executeUserOptions
        #void executeUserOptions()
        #{
        #    this.startAutoLogoffTimer();
        #
        #    this.setTimeOut(methodstr(Info,watchDog), #watchdogInterval, false);
        #}
        #
      ENDSOURCE
      SOURCE #export
        #container export()
        #{
        #    return infolog.copy(1, infolog.num());
        #}
      ENDSOURCE
      SOURCE #findNode
        #/*
        #    corrects xInfo.findNode so it can find the root node by it's path: '\'
        #*/
        #TreeNode findNode(str _path)
        #{
        #    str path = _path == '\\' ? '' : _path;
        #    return super(path);
        #}
      ENDSOURCE
      SOURCE #formNotify
        #void formNotify(FormRun formRun,FormNotify event,FormNotifyEventArgs eventArgs=null)
        #{
        #    switch (event)
        #    {
        #        case FormNotify::Activate:
        #            this.activate(formRun);
        #            if (docu)
        #                docu.reSearch(formRun);
        #            break;
        #        case FormNotify::DeActivate:
        #            break;
        #        case FormNotify::Open:
        #            this.open(formRun);
        #            if (docu)
        #                docu.set(formRun);
        #            break;
        #        case FormNotify::Close:
        #            this.close(formRun);
        #            if (docu)
        #                docu.clear(formRun);
        #            break;
        #        case FormNotify::RecordChange:
        #            if (docu)
        #                docu.reSearch(formRun);
        #
        #            if (formRun.isWorkflowEnabled())
        #            {
        #                // only refresh controls if current ds equals workflow data source
        #                if ((eventArgs != null) && (eventArgs.formDataSource()))
        #                {
        #                    if (eventArgs.formDataSource().name() == formRun.workflowDataSource().name())
        #                    {
        #                        formRun.updateWorkflowControls();
        #                    }
        #                }
        #            }
        #
        #            break;
        #        case FormNotify::NoteClicked:
        #            if (docu)
        #                docu.note(formRun);
        #            break;
        #        case FormNotify::RecordsWritten:
        #            if (formRun.isWorkflowEnabled())
        #            {
        #                formRun.updateWorkflowControls();
        #            }
        #            break;
        #    }
        #}
        #
      ENDSOURCE
      SOURCE #getInfoActionData
        #container getInfoActionData(int line)
        #{
        #    recId recId = tmpActionId[line];
        #
        #    if (recId)
        #    {
        #        select tmpInfoTable
        #            where tmpInfoTable.RecId == recId;
        #        return [tmpInfoTable.ActionClassId, tmpInfoTable.Action];
        #    }
        #    return connull();
        #}
      ENDSOURCE
      SOURCE #getNode
        #public TreeNode getNode(UtilElementType _utilType,
        #                        str _name,
        #                        utilElementId _parentId=0,
        #                        int _utilFileType=UtilFileType::Application,
        #                        UtilEntryLevel _utillevel=0,
        #                        boolean _forcelevel=0,
        #                        int _mode=0,
        #                        boolean _oldUtil=0)
        #{
        #    UtilElements utilElem;
        #    TreeNode treeNode;
        #
        #    if (_utilFileType == UtilFileType::Application)
        #    {
        #        if (_utilType == UtilElementType::ViewQuery ||
        #            _utilType == UtilElementType::SecurityKey ||
        #            _utilType == UtilElementType::ConfigurationKey ||
        #            _utilType == UtilElementType::Perspective)
        #        {
        #            // The kernel's findNode() cannot return these types
        #
        #            utilElem.RecordType = _utilType;
        #            utilElem.Name       = _name;
        #            utilElem.ParentId   = _parentId;
        #
        #            treeNode = TreeNode::findNode(xUtilElements::getNodePathRough(utilElem));
        #
        #            if (! treeNode)
        #                return null;
        #
        #            if (treeNode.AOTLayer() == _utillevel &&
        #                treeNode.AOTIsOld() == _oldUtil)
        #            {
        #                return treeNode;  // The right one
        #            }
        #
        #            return SysTreeNode::nodeInLayer(treeNode, _utillevel, _forcelevel, _oldUtil);
        #        }
        #    }
        #
        #    return super(_utilType, _name, _parentId, _utilFileType, _utillevel, _forcelevel, _mode, _oldUtil);
        #}
      ENDSOURCE
      SOURCE #getPDFFontCache
        #SysPDFFontCache getPDFFontCache()
        #{;
        #    // Generating PDF fonts is very time consuming, so we keep a cache global here, Axapta 4.0#41749.
        #    // To reduce the likely hood of confusing print job settings this cache is cleared when the app goes idle, see onEventGoingIdle.
        #    // So, the cache is really only used in rapid printing scenarios, such as batch printing.
        #    if (!pdfFontCache)
        #        pdfFontCache = new SysPDFFontCache();
        #
        #    return pdfFontCache;
        #}
      ENDSOURCE
      SOURCE #globalCache
        #SysGlobalCache globalCache()
        #{
        #    if (!globalCache)
        #        globalCache = SysGlobalCache::construct();
        #
        #    return globalCache;
        #}
        #
        #
      ENDSOURCE
      SOURCE #import
        #boolean import(container c, boolean clearExisting = false)
        #{
        #    int version, oldInfologLen;
        #    int i, start, end, len;
        #    container currentEntry;
        #    int entryLen;
        #    int entryType;
        #    str entryText;
        #    ;
        #
        #    len = conlen(c);
        #
        #    // Must have at least one element
        #    if(len == 0)
        #        return false;
        #
        #    // first element is a container with one integer element (version)
        #    if(typeof(conpeek(c, 1)) != Types::Container ||
        #        conlen(conpeek(c, 1)) != 1 ||
        #        typeof(conpeek(conpeek(c, 1), 1)) != Types::Integer)
        #        return false;
        #
        #    // Get the version
        #    version = conpeek(conpeek(c, 1), 1);
        #
        #    // version has to match otherwise import fails
        #    if(version != #CurrentVersion)
        #        return false;
        #
        #    // Save the current number of entries
        #    oldInfologLen = infolog.num();
        #
        #    // append to the info log
        #    for(i = 2; i <= len; i++)
        #    {
        #        // each entry is a container
        #        if(typeof(conpeek(c, i)) != Types::Container)
        #            break;
        #
        #        // Get the current entry
        #        currentEntry = conpeek(c, i);
        #
        #        // Get the current entry length
        #        entryLen = conlen(currentEntry);
        #
        #        // entries can be formatted in 2 ways
        #        // 1. [exceptionType, Text]
        #        // 2. [exceptionType, Text, helpUrl, actionClassId, action]
        #        if(entryLen != 2 && entryLen != 5)
        #            break;
        #
        #        // Validate types
        #        if(typeof(conpeek(currentEntry, 1)) != Types::Integer ||
        #            typeof(conpeek(currentEntry, 2)) != Types::String)
        #            break;
        #
        #        // Extract the first 2 values in the entry
        #        entryType = conpeek(currentEntry, 1);
        #        entryText = conpeek(currentEntry, 2);
        #
        #        if(entryLen == 5)
        #        {
        #            // Validate types
        #            if(typeof(conpeek(currentEntry, 3)) != Types::String ||
        #                typeof(conpeek(currentEntry, 4)) != Types::Integer ||
        #                typeof(conpeek(currentEntry, 5)) != Types::Container)
        #                break;
        #
        #            // Extract the remaining 3
        #            this.addSysInfoAction(conpeek(currentEntry, 3), conpeek(currentEntry, 4), conpeek(currentEntry, 5));
        #        }
        #
        #        // Add the entry to the current infolog
        #        //BP Deviation documented - Must use infolog.add because the Global class does not expose helper methods for each type of exception.
        #        infolog.add(entryType, entryText);
        #    }
        #
        #    // Revert in the case of failure
        #    if(i < len)
        #    {
        #        start = oldInfologLen + 1;
        #        end = oldInfologLen + i - 2;
        #
        #        if(start >= infolog.num())
        #            infolog.cut(start, end);
        #
        #        return false;
        #    }
        #
        #    // Clear the old info log items
        #    if(clearExisting && oldInfologLen > 0)
        #    {
        #        infolog.cut(1, oldInfologLen);
        #    }
        #
        #    return true;
        #}
      ENDSOURCE
      SOURCE #infoActionObject
        #/*
        #This object will be passed to the unpack method on a SysInfoAction class.
        #Make sure the object is a client object, otherwise it will not be passed on.
        #*/
        #Object infoActionObject(Object obj = null)
        #{
        #    if (!prmisdefault(obj))
        #    {
        #        if (obj)
        #        {
        #            infoActionObject = new ObjectIdent(obj);
        #        }
        #        else
        #        {
        #            infoActionObject = null;
        #        }
        #    }
        #    if (infoActionObject && infoActionObject.object())
        #        return infoActionObject.object();
        #
        #    return null;
        #}
      ENDSOURCE
      SOURCE #infologData
        #InfologData infologData()
        #{
        #    recId tmpActionIdBackup[];
        #    int i;
        #    int lines = this.num();
        #    InfologData infologData = this.copy(1,lines);
        #
        #    for (i=1; i<=lines; i++)
        #        tmpActionIdBackup[i] = tmpActionId[i];
        #
        #    this.clear(0);
        #
        #    for (i=1; i<=lines; i++)
        #        tmpActionId[i] = tmpActionIdBackup[i];
        #
        #    return infologData;
        #}
      ENDSOURCE
      SOURCE #infologLevel
        #SysInfologLevel infologLevel()
        #{
        #    return loglevel;
        #}
      ENDSOURCE
      SOURCE #initBrowser
        #boolean initBrowser()
        #{
        #    FormRun browserWindow;
        #    Args browserArgs = new Args();
        #    xSession mySession = new xSession();
        #    ClientType clientType = xGlobal::clientKind();
        #
        #    // COM Object/Server
        #    if ((clientType == ClientType::COMObject) || (clientType == ClientType::Server) || Session::isServer())
        #        return false;
        #
        #    // bugfix DE-552-764-S99j
        #    if (mySession.clientKind() == ClientType::WorkerThread)
        #        return false;
        #
        #    if (!this.browser())
        #    {
        #        // No browser found to create one and store it in the
        #        // current workspace
        #
        #        // A browser must be resized once for the tree to appear
        #        this.browserResizedOnce(false);
        #
        #        browserArgs.name(formstr(SysInfologBrowser));
        #        //BP deviation documented - ClassFactory.formRunClass method cannot be used since ClassFactory is not initialized at this point.
        #        browserWindow = new FormRun(browserArgs);
        #
        #        this.browser(browserWindow);
        #        this.browser().run();
        #        this.initializeInfolog(this.browser().hWnd());
        #        return true;
        #    }
        #
        #    if( SysTaskRecorderEventManager::parmRecording() )
        #    {
        #        if( !(this.browser() is SysTaskRecorderSetupFormRun) )
        #        {
        #            this.browserResizedOnce(false);
        #            browserArgs.name(formstr(SysInfologBrowser));
        #            browserWindow = SysTaskRecorderSetupFormRun::newArgs(browserArgs);
        #            this.browser(browserWindow);
        #            this.browser().run();
        #            this.initializeInfolog(this.browser().hWnd());
        #
        #            SysTaskRecorderRunningFormsManager::addFormToList(browserWindow);
        #
        #            return true;
        #        }
        #
        #    }
        #
        #    return false;
        #}
      ENDSOURCE
      SOURCE #insertXReferences
        #void insertxReferences()
        #{
        #    ;
        #
        #    if (this.canUpdatexRef())
        #    {
        #        xRefCreate::insertxReferences(true);
        #    }
        #}
      ENDSOURCE
      SOURCE #isDocuSet
        #boolean isDocuSet()
        #{
        #    if (docuView && docuView.object())
        #        return true;
        #
        #    return false;
        #}
      ENDSOURCE
      SOURCE #lastxRef
        #xRef lastxRef(xRef _lastxRef = lastxRef)
        #{
        #    lastxRef = _lastxRef;
        #    return lastxRef;
        #}
      ENDSOURCE
      SOURCE #line
        #/// <summary>
        #/// Returns the number of lines in the Infolog buffer.
        #/// </summary>
        #/// <returns>
        #/// The number of lines in the Infolog buffer.
        #/// </returns>
        #[SysObsoleteAttribute("@SYS138838", false)]
        #public int line()
        #{
        #    return super();
        #}
      ENDSOURCE
      SOURCE #new
        #void new()
        #{
        #    UserInfo userInfo;
        #
        #    super();
        #
        #    // Initialize the TmpInfolog.
        #    this.emptyTmpInfolog();
        #
        #    if(new Session().clientKind() == ClientType::Client)
        #    {
        #        AifServiceGenerationManager::registerServicesOnClient();
        #    }
        #
        #    select firstonly InfologLevel from userInfo
        #        where userInfo.Id == curuserid();
        #
        #    loglevel = userInfo.InfologLevel;
        #
        #    profileMgr = ProfileManager::construct();
        #
        #    alreadySetCanViewAlertInbox = false;
        #    canViewAlertInboxValue = false;
        #}
      ENDSOURCE
      SOURCE #newHeadLine
        #void newHeadLine(SysInfologMessageStruct logline)
        #{
        #    #Resource
        #    #ResAppl
        #
        #    str 11          time = time2str(timenow(), 0, 0);
        #    FormTreeItem    formTreeItem;
        #    SysInfolog      tmpInfoTable2;
        #
        #    tmpInfoTable2.recordLevelSecurity(true);
        #    tmpInfoLog.recordLevelSecurity(true);
        #
        #    if (logline.prefixDepth())
        #    {
        #        firstPrefix = 2;
        #        tmpInfoLog.Name      = logline.preFixTextElement(1);
        #    }
        #    else
        #    {
        #        firstPrefix = 1;
        #        tmpInfoLog.Name      = "@SYS14327"+' ('+time+')';
        #    }
        #
        #    tmpInfoLog.Parent    = 0;
        #    tmpInfoLog.Prefix    = tmpInfoLog.Name;
        #    tmpInfoLog.Image     = this.browserImageList().image(#ImageEnvelopeOpen);
        #    tmpInfoLog.Seq       = this.sequence();
        #    tmpInfoLog.insert();
        #    // BP deviation documented
        #    tmpInfoTable2.setTmp();
        #    tmpInfoTable2.setTmpData(tmpInfoTable);
        #    tmpInfoTable2.Text    = tmpInfoLog.Name;
        #    tmpInfoTable2.insert();
        #
        #    // BP deviation documented
        #    formTreeItem         = new FormTreeItem(tmpInfoLog.Name, tmpInfoLog.Image);
        #    formTreeItem.stateBold(true);
        #    formTreeItem.stateExpanded(true);
        #
        #    treeId[1] = this.browserErrorTree().addItem(0,FormTreeAdd::First, formTreeItem);
        #    if (!treeId[1])
        #        throw error(strfmt("@SYS76877",tmpInfoLog.Name));
        #
        #    this.browserErrorTree().selectSetFirstVisible(treeId[1]);
        #    formTreeItem = this.browserErrorTree().getItem(treeId[1]);
        #    formTreeItem.data(tmpInfoTable2.RecId);
        #    this.browserErrorTree().setItem(formTreeItem);
        #}
        #
      ENDSOURCE
      SOURCE #numFrom
        #/*
        #Method to get the number of a specific exception, from a specific line in the infolog. Like the num() method,
        #but with the from parameter.
        #*/
        #Integer numFrom(
        #    Integer     fromNo,
        #    Exception   exception
        #    )
        #{
        #    Counter     i,noOf;
        #
        #    for (i=fromNo;i<= infologLine() ;i++)
        #    {
        #        if (this.level(i) == exception)
        #            noOf++;
        #    }
        #
        #    return noOf;
        #}
      ENDSOURCE
      SOURCE #onEventGoingIdle
        #//Event fired by kernel when the client goes idle.
        #//It is not fired during CTRL-Break dialog.
        #void onEventGoingIdle()
        #{
        #    ;
        #
        #    this.operationProgressClear();
        #    this.endLengthyOperation(true);
        #    pdfFontCache = null;
        #
        #    // Check whether the Task Recorder requires a screenshot
        #    if (SysTaskRecorderEventManager::parmRecording())
        #    {
        #        if  (SysTaskRecorderGlobal::getGlobalProperty(#globalPropTakeScreenshot, false))
        #        {
        #            SysTaskRecorderGlobal::setGlobalProperty(#globalPropTakeScreenshot, false);
        #            SysTaskRecorderTask::takeScreenshot();
        #        }
        #
        #        if (SysTaskRecorderGlobal::getGlobalProperty(#globalPropWarnOnFormActivate, false)
        #            && this.parmLastActivatedForm())
        #        {
        #            SysTaskRecorderGlobal::setGlobalProperty(#globalPropWarnOnFormActivate,false);
        #            SysTaskRecorderEventManager::warnIfFormCannotBeRecorded(this.parmLastActivatedForm().object());
        #        }
        #    }
        #}
      ENDSOURCE
      SOURCE #open
        #void open(FormRun formRun)
        #{
        #
        #}
      ENDSOURCE
      SOURCE #operationProgress
        #SysOperationProgressForm operationProgress(boolean query = false)
        #{
        #    if (!query && !operationProgress)
        #        operationProgress = SysOperationProgressForm::construct();
        #
        #    return operationProgress;
        #}
      ENDSOURCE
      SOURCE #operationProgressClear
        #void operationProgressClear()
        #{
        #    SysOperationProgress sysOperationProgress;
        #;
        #    if (operationProgress)
        #    {
        #        sysOperationProgress = operationProgress.caller();
        #        if (!sysOperationProgress)
        #        {
        #            SysOperationProgress::clearCache();
        #        }
        #        else
        #        {
        #            sysOperationProgress.hide();
        #        }
        #        operationProgress = null;
        #    }
        #}
      ENDSOURCE
      SOURCE #parmDocu
        #Docu parmDocu()
        #{
        #    return docu;
        #}
      ENDSOURCE
      SOURCE #parmDocuHandlingActive
        #boolean parmDocuHandlingActive(boolean _docuHandlingActive = docuHandlingActive)
        #{
        #;
        #    docuHandlingActive = _docuHandlingActive;
        #
        #    return docuHandlingActive;
        #}
      ENDSOURCE
      SOURCE #parmDocuToolbarButtonActive
        #boolean parmDocuToolbarButtonActive(boolean _docuToolbarButtonActive = docuToolbarButtonActive)
        #{
        #;
        #    docuToolbarButtonActive = _docuToolbarButtonActive;
        #
        #    return docuToolbarButtonActive;
        #}
      ENDSOURCE
      SOURCE #parmLastActivatedForm
        #ObjectIdent parmLastActivatedForm()
        #{
        #    return lastActivatedForm;
        #}
      ENDSOURCE
      SOURCE #print
        #void print(PrintMedium _printMedium,
        #           str         _name        = '')
        #{
        #    Object  object;
        #
        #    if (this.browser())
        #    {
        #        object = this.browser();
        #        object.print(true, _printMedium, _name);
        #    }
        #}
      ENDSOURCE
      SOURCE #profileMgr
        #ProfileManager profileMgr()
        #{
        #    return profileMgr;
        #}
      ENDSOURCE
      SOURCE #removeTimeOut
        #void removeTimeOut(int timerHdl)
        #{
        #    this.cancelTimeOut(timerHdl);
        #
        #    if (setTimeOutMap)
        #    {
        #        setTimeOutMap.remove(timerHdl);
        #    }
        #}
      ENDSOURCE
      SOURCE #reportSendMail
        #void reportSendMail(PrintJobSettings p1)
        #{
        #    SysINetMail m = new SysINetMail();
        #
        #    str fileName = 'axaptareport';
        #
        #    if (p1.format() == PrintFormat::ASCII || p1.format() == PrintFormat::TEXTUTF8)
        #        fileName = fileName + '.txt';
        #    else if (p1.format() == PrintFormat::RTF)
        #        fileName = fileName + '.rtf';
        #    else if (p1.format() == PrintFormat::HTML)
        #        fileName = fileName + '.htm';
        #    else if (p1.format() == PrintFormat::PDF || p1.format() == PrintFormat::PDF_EMBED_FONTS)
        #        fileName = fileName + '.pdf';
        #
        #    m.sendMailAttach(p1.mailTo(),p1.mailCc(), p1.mailSubject(),'axapta report', true, p1.fileName(), fileName);
        #}
        #
      ENDSOURCE
      SOURCE #reportSendMailServer
        #void reportSendMailServer(PrintJobSettings p1)
        #{
        #    ;
        #    RunbaseReportStd::serverSendMail(p1);
        #}
      ENDSOURCE
      SOURCE #sequence
        #int sequence()
        #{
        #    sequenceCounter++;
        #    return sequenceCounter;
        #}
      ENDSOURCE
      SOURCE #setAction
        #void setAction(int lineNum, SysInfoAction _sysInfoAction = null)
        #{
        #    ;
        #    select forupdate tmpInfoTable where
        #        tmpInfoTable.RecId == tmpActionId[lineNum];
        #
        #    if (_sysInfoAction)
        #    {
        #        tmpInfoTable.Action        = _sysInfoAction.pack();
        #        tmpInfoTable.ActionClassId = classidget(_sysInfoAction);
        #    }
        #    else
        #    {
        #        tmpInfoTable.Action        = connull();
        #        tmpInfoTable.ActionClassId = 0;
        #    }
        #
        #    if (tmpInfoTable.RecId)
        #    {
        #        tmpInfoTable.update();
        #    }
        #    else
        #    {
        #        tmpInfoTable.insert();
        #        tmpActionId[linenum] = tmpInfoTable.RecId;
        #    }
        #}
      ENDSOURCE
      SOURCE #setDocuHandling
        #void setDocuHandling()
        #{
        #    SysUserInfo sysUserInfo = SysUserInfo::find();
        #
        #    this.parmDocuHandlingActive(sysUserInfo.DocuHandlingActive);
        #    this.parmDocuToolbarButtonActive(sysUserInfo.DocuToolbarButtonActive);
        #
        #    docu.initCheckToolbarButtonTicks();
        #}
      ENDSOURCE
      SOURCE #setInfoLogLevel
        #void setInfoLogLevel(SysInfologLevel level)
        #{
        #    loglevel = level;
        #}
      ENDSOURCE
      SOURCE #setLastActivatedForm
        #ObjectIdent setLastActivatedForm(FormRun _lastActivatedForm = null)
        #{
        #    if (!prmisdefault(_lastActivatedForm))
        #        lastActivatedForm = new ObjectIdent(_lastActivatedForm);
        #
        #    return lastActivatedForm;
        #}
      ENDSOURCE
      SOURCE #singleError
        #SysInfolog singleError()
        #{
        #    FormTreeItem item = this.browserErrorTree().getItem(treeId[2]);
        #    SysInfolog tmpInfoTable2;
        #    tmpInfoTable2.recordLevelSecurity(true);
        #    //BP deviation documented
        #    tmpInfoTable2.setTmp();
        #    tmpInfoTable2.setTmpData(tmpInfoTable);
        #
        #    if (treeItems == 1)
        #    {
        #        select firstonly tmpInfoTable2
        #            where tmpInfoTable2.RecId == item.data();
        #        return tmpInfoTable2;
        #    }
        #    return null;
        #}
      ENDSOURCE
      SOURCE #startAutoLogoffTimer
        #void startAutoLogoffTimer()
        #{
        #    UserInfo userInfo;
        #
        #    select firstonly AutoLogOff
        #        from userInfo
        #        where userInfo.Id == curuserid();
        #
        #    if (userInfo && userInfo.AutoLogOff)
        #    {
        #        this.setTimeOut(methodstr(Info,autologOff), userInfo.AutoLogOff*1000*60, true);
        #    }
        #}
      ENDSOURCE
      SOURCE #startup
        #/*
        #This method shouldn't be overlayered, use the startupPost() method instead !
        #*/
        #void startup(str startupCommand)
        #{
        #    SysStartupCmd sysStartupCmd;
        #
        #    this.initBrowser();
        #    this.clearBrowser();
        #    this.docuInit();
        #
        #    if (xGlobal::clientKind() == ClientType::COMObject)
        #        return;
        #
        #    if (startupCommand)
        #    {
        #        sysStartupCmd = SysStartupCmd::construct(startupCommand);
        #        if (sysStartupCmd)
        #            sysStartupCmd.infoInit();
        #    }
        #    this.executeUserOptions();
        #    this.setDocuHandling();
        #
        #    super(startupCommand);
        #
        #    InventDim::startUpCreateBlank();
        #
        #    this.startupPost();
        #    SysFileDeployer::main(new Args());
        #
        #    if (hasGui())
        #    {
        #        if (!isRunningMode())
        #        {
        #            if (!ReleaseUpdateRunning::start())
        #            {
        #                SysCheckList::runCheckList();
        #            }
        #        }
        #        else
        #        {
        #            // Present dialog to client if model store is dirty. Prioritize checklist prior to modified model store dialog.
        #            if (isSystemAdministrator() && (SysModelStore::isInstallMode() || SysCheckList_Update::isUpgradeMode()))
        #            {
        #                SysModelStoreModified::main(new Args());
        #            }
        #        }
        #    }
        #
        #    versioncontrol.init();
        #
        #    if (isRunningMode() && isConfigurationkeyEnabled(configurationkeynum(event)))
        #        this.eventAlertInit();
        #
        #    if (startupCommand && sysStartupCmd)
        #    {
        #        sysStartupCmd.infoRun();
        #    }
        #
        #    if (isRunningMode())
        #    {
        #        this.checkStartupCompany();
        #
        #        if (!startupCommand)
        #        {
        #            this.checkForTimeZoneMismatch();
        #        }
        #    }
        #
        #    if (!appl.isConfigMode() && xGlobal::clientKind() == ClientType::Client)
        #    {
        #        smmInit::getsmmInitObject();
        #    }
        #}
        #
      ENDSOURCE
      SOURCE #startupPost
        #/*
        #No SYS code must exist in this method
        #*/
        #void startupPost()
        #{
        #    //TODO: Clean-up env.: temporary lock >
        #    info::triCheckApplStartup();
        #    //TODO: Clean-up env.: temporary lock <
        #}
      ENDSOURCE
      SOURCE #tmpInfoTable
        #SysInfolog tmpInfoTable()
        #{
        #    return tmpInfoTable;
        #}
      ENDSOURCE
      SOURCE #updateViewSet
        #/*
        #Will disable the infolog if an object is provided and disabled is true.
        #The log is enabled if object = null, or object = current classid and disable = false
        #*/
        #void updateViewSet(Object obj, boolean disable = true)
        #{
        #    if (disable && obj)
        #    {
        #        // If another object is still alive
        #        if (updateViewObj && updateViewObj.object())
        #            return;
        #
        #        updateViewObj   = new ObjectIdent(obj);
        #    }
        #    else
        #    {
        #        if (obj)
        #        {
        #            if (updateViewObj && updateViewObj.object() && classidget(obj) == classidget(updateViewObj.object()))
        #                updateViewObj   = null;
        #        }
        #        else
        #            updateViewObj   = null;
        #    }
        #}
      ENDSOURCE
      SOURCE #updatexRefSet
        #/*
        #Will disable update of the xRef if an object is provided and disabled is true.
        #The update is enabled if object = null, or object = current classid and disable = false
        #*/
        #void updatexRefSet(Object obj,
        #                   boolean disable = true)      // true => xRef DB are disabled. false => enabled
        #{
        #    if (disable && obj)
        #    {
        #        // If another object is still alive
        #        if (updatexRefObj && updatexRefObj.object())
        #            return;
        #
        #        updatexRefObj   = new ObjectIdent(obj);
        #    }
        #    else
        #    {
        #        if (obj)
        #        {
        #            if (updatexRefObj &&
        #                updatexRefObj.object() &&
        #                classidget(obj) == classidget(updatexRefObj.object()))
        #            {
        #                updatexRefObj = null;
        #            }
        #        }
        #        else
        #        {
        #            updatexRefObj   = null;
        #        }
        #    }
        #}
      ENDSOURCE
      SOURCE #updateXrefTreeNode
        #/// <summary>
        #///    Updates the cross reference information for the following node types: \Web\Web Files\List
        #///    Definitions, \Web\Web Files\Static Files, \Web\Web Files\Page Definitions, \Web\Web Files\Web
        #///    Controls, \SSRS Reports\Reports\ReportDesign, \Visual Studio Projects\ProjectX, \Visual Studio
        #///    Projects\ProjectX\Project Output\Assembly File,
        #/// </summary>
        #/// <param name="_treeNode">
        #///    The tree node for which to update the cross references.
        #/// </param>
        #/// <remarks>
        #///    This method is invoked by the framework whenever any of the described node types is compiled or
        #///    updated for cross reference.
        #/// </remarks>
        #void updateXrefTreeNode(TreeNode _treeNode)
        #{
        #    #TreeNodeSysNodeType
        #
        #    if (_treeNode)
        #    {
        #        try
        #        {
        #            switch (_treeNode.TreeNodeType().id())
        #            {
        #                case #NT_WEBPAGEDEF: // for \Web\Web Files\Page Definitions
        #                case #NT_WEBSTATICFILE: // for \Web\Web Files\Static Files
        #                case #NT_WEBCONTROL: // for \Web\Web Files\Web Controls
        #                case #NT_WEBLISTDEF: // for \Web\Web Files\List Definitions
        #                    xrefWeb::updateXref(_treeNode);
        #                    break;
        #                case #NT_SSRSREPORTDESIGN: // for \SSRS Reports\Reports\ReportDesign
        #                    xrefSSRSReport::updateReportDesignXref(_treeNode);
        #                    break;
        #                case #NT_SSRSREPORT: // for \SSRS Reports\Reports\Report
        #                    xrefSSRSReport::updateReportConceptNodeXref(_treeNode);
        #                    break;
        #                case #NT_REFERENCE:
        #                    xRefAssemblyReferences::updateXref(_treeNode);   // for \References\
        #                    break;
        #                case #NT_VSPROJECT: // for \Visual Studio Projects\ProjectX
        #                    xrefVisualStudioProject::updateXref(_treeNode);
        #                    break;
        #                case #NT_VSPROJECTFILE: // for \Visual Studio Projects\ProjectX\Project Output\Assembly File
        #                    xrefVisualStudioProject::updateAssemblyXref(_treeNode);
        #                    break;
        #            }
        #        }
        #        catch
        #        {
        #            error(strfmt("@SYS320348",_treeNode.AOTname()));
        #        }
        #    }
        #}
      ENDSOURCE
      SOURCE #urlLookup
        #void urlLookup(str url = '')
        #{
        #    str execFile;
        #    str tempFileName;
        #    TextBuffer buf;
        #    if (url)
        #    {
        #        urlLookup = url;
        #        this.setTimeOut(identifierstr(UrlLookup),5,false);
        #    }
        #    else
        #    {
        #        tempFileName = WinAPI::getTempPath() + 'temp.htm';
        #        buf = new TextBuffer();
        #        buf.setText('<HTML> <\HTML>');
        #        //BP deviation documented
        #        buf.toFile(tempFileName);
        #        execFile = WinAPI::findExecutable(tempFileName);
        #        if (execFile)
        #            WinAPI::shellExecute(execFile,urlLookup);
        #        else
        #            WinAPI::shellExecute(urlLookup);
        #
        #        urlLookup = '';
        #    }
        #}
      ENDSOURCE
      SOURCE #view
        #void view(container _c = connull())
        #{
        #    if (! this.canUpdateView())
        #        return;
        #
        #    if (prmisdefault(_c))
        #    {
        #        if (this.num() && !updateCalled)
        #        {
        #            updateCalled = true;
        #            this.setTimeOut(identifierstr(ViewDelay),1,true);
        #        }
        #    }
        #    else
        #    {
        #        this.viewBuild(_c);
        #    }
        #}
      ENDSOURCE
      SOURCE #viewAlertInbox
        #public void viewAlertInbox(int _selectedTab=1)
        #{
        #    MenuFunction menuFunction;
        #    Args args;
        #
        #    ;
        #    super(_selectedTab);
        #
        #    args = new Args();
        #
        #    args.parm(int2str(_selectedTab));
        #
        #    menuFunction = new MenuFunction(menuitemdisplaystr(EventAlertInbox),
        #                                       MenuItemType::Display);
        #    menuFunction.run(args);
        #}
      ENDSOURCE
      SOURCE #viewBuild
        ##define.MaxErrors(10000)
        #
        #void viewBuild(
        #    InfologData _data               = this.copy(1,this.num()),
        #    boolean     _emptyTmpInfolog    = false)
        #{
        #    SysInfologMessageStruct logLine;
        #
        #    int                  i = 1, j;
        #    Exception            exception;
        #    str 12               time = time2str(timenow(),0,0);
        #    int                  resNumber;
        #    int                  batchCount;
        #
        #    FormTreeItem         treeItem;
        #    int                  imageNumber;
        #
        #    int                  parentId;
        #    SysInfoLogStr        niceName;
        #
        #    TmpInfolog           tmpLookup;
        #    UserInfo             userInfo;
        #
        #    int                  oldParentId;
        #    SysInfologEnumerator enum = SysInfologEnumerator::newData(_data);
        #    #resource
        #    #resAppl
        #
        #TmpInfolog selectInfolog()
        #{
        #    TmpInfolog tmpinfolog2;
        #    tmpinfolog2.setTmpData(tmpInfoLog);
        #
        #    select tmpinfolog2
        #        where tmpinfolog2.Seq == 1;
        #
        #    if (tmpinfolog2)
        #        return tmpinfolog2;
        #    return null;
        #}
        #
        #TmpInfolog selectInfolog2(SysInfologPrefix _prefix, int _parentid)
        #{
        #    TmpInfolog tmpinfolog2;
        #    tmpinfolog2.setTmpData(tmpInfoLog);
        #
        #    select tmpinfolog2
        #        where tmpinfolog2.Parent == _parentid   &&
        #              tmpinfolog2.Prefix == _prefix;
        #
        #    if (tmpinfolog2)
        #        return tmpinfolog2;
        #    return null;
        #}
        #
        #    if (prmisdefault(_data))
        #        this.clear(0);
        #
        #    if (conlen(_data)==0)
        #        return;
        #
        #    if (enum.length() > #maxerrors)
        #    {
        #        enum.delete(#maxerrors);
        #        enum.add(Exception::Warning, strfmt("@SYS86217", #maxerrors));
        #    }
        #
        #    startLengthyOperation();
        #    enum.reset();
        #    while (enum.moveNext())
        #    {
        #        exception = enum.currentException();
        #        if (maxException < exception )
        #            maxException = exception;
        #    }
        #
        #    switch (maxException)
        #    {
        #        case Exception::Info:
        #            imageResource       = #RES_INFOLOG_L_INFO;
        #            errorDescription    = "@SYS26000";
        #            break;
        #
        #        case Exception::Warning:
        #            imageResource       = #RES_INFOLOG_L_WARNING;
        #            errorDescription    = "@SYS26001";
        #            break;
        #
        #        default :
        #            imageResource       = #RES_INFOLOG_L_ERROR;
        #            errorDescription    = "@SYS26002";
        #            break;
        #    }
        #
        #    select firstonly DebugInfo, TraceInfo from userInfo
        #        where userInfo.Id == curuserid();
        #
        #    // Make sure there is a browser available
        #    // for the current application window.
        #    if (this.initBrowser())
        #    {
        #        this.clearBrowser();
        #    }
        #
        #    if (!bitTest(userInfo.DebugInfo, 1 << 8 ) ||       //SQL Trace Off
        #       (!bitTest(userInfo.TraceInfo, 1 << 1 ) &&       //FLAG_TraceInfoStateInfo
        #        !bitTest(userInfo.TraceInfo, 1 << 5 )))        //FLAG_TraceInfoWarningInfo
        #    {
        #        infolog.activateWindow(this.browser().hWnd());
        #        infolog.setWindowOrder(this.browser().hWnd());
        #    }
        #    enum.reset();
        #    enum.moveNext();
        #    logLine  = SysInfologMessageStruct::construct(enum.currentMessage());
        #
        #    tmpInfoLog = selectInfoLog();
        #    tmpInfoLog.recordLevelSecurity(true);
        #
        #    if (!tmpInfoLog)
        #        this.newHeadLine(logLine);
        #
        #    hasPrefix = false;
        #
        #    enum.reset();
        #    i = 1;
        #    while (enum.moveNext())
        #    {
        #        logLine  = SysInfologMessageStruct::construct(enum.currentMessage());
        #        exception = enum.currentException();
        #
        #        switch (exception)
        #        {
        #            case Exception::Info:
        #                imageNumber = this.browserImageList().image(#ImageInfo);
        #                resNumber   = #RES_INFOLOG_L_INFO;
        #                break;
        #
        #            case Exception::Warning:
        #                imageNumber = this.browserImageList().image(#ImageWarning);
        #                resNumber   = #RES_INFOLOG_L_WARNING;
        #                break;
        #
        #            default :
        #                imageNumber = this.browserImageList().image(#ImageError);
        #                resNumber   = #RES_INFOLOG_L_ERROR;
        #                break;
        #        }
        #        parentId = 1;   //header has id = 1
        #
        #        for (j=firstPrefix; j<=logLine.prefixDepth(); j++)
        #        {
        #            tmpLookup.setTmpData(tmpInfoLog);
        #            tmpLookup = selectInfolog2(logLine.preFixTextElement(j), parentid);
        #
        #            if (tmpLookup)
        #            {
        #                parentId = tmpLookup.Seq;
        #            }
        #            else
        #            {
        #                batchCount           = 0;
        #                tmpInfoLog.Name      = logLine.preFixTextElement(j);
        #                tmpInfoLog.Parent    = parentId;
        #                tmpInfolog.Prefix    = tmpInfolog.Name;
        #                tmpInfolog.ConIdx    = 0;
        #                tmpInfoLog.Image     = this.browserImageList().image(#ImageNote);
        #                tmpInfoLog.Seq       = this.sequence();
        #                tmpInfoLog.insert();
        #                parentId             = tmpInfoLog.Seq;
        #            }
        #        }
        #        if (parentId != oldParentId)
        #        {
        #            batchCount  = 0;
        #            oldParentId = parentId;
        #        }
        #        if (batchCount <= errorsPerBatch)
        #        {
        #            tmpInfoLog.Parent   = parentId;
        #            tmpInfoLog.Seq      = this.sequence();
        #
        #            if (batchCount == errorsPerBatch)
        #            {
        #                tmpInfoLog.Name     = strfmt("@SYS86217", errorsPerBatch);
        #                tmpInfoLog.Image    = this.browserImageList().image(#ImageWarning);
        #                tmpInfolog.ConIdx   = i;
        #
        #                if((!imageResource) || (imageResource == #RES_INFOLOG_L_INFO))
        #                {
        #                    imageResource       = #RES_INFOLOG_L_WARNING;
        #                    errorDescription    = "@SYS26001";
        #                }
        #            }
        #            else
        #            {
        #                if (enum.currentActionClassId() ||
        #                    enum.currentHelpUrl())
        #                {
        #                    tmpInfoTable.HelpUrl       = enum.currentHelpUrl();
        #                    tmpInfoTable.Action        = enum.currentActionClassData();
        #                    tmpInfoTable.ActionClassId = enum.currentActionClassId();
        #                    tmpInfoTable.insert();
        #                    tmpActionId[i] = tmpInfoTable.RecId;
        #                }
        #
        #                tmpInfoLog.Name     = logLine.message();
        #                tmpInfoLog.Image    = imageNumber;
        #                tmpInfolog.ConIdx   = i;
        #            }
        #            tmpInfoLog.doInsert();
        #            batchCount++;
        #        }
        #        i++;
        #    }
        #
        #
        #
        #    while select forupdate tmpInfoLog
        #        order by Seq
        #        where tmpInfoLog.Seq > offsetSeq
        #    {
        #        niceName = strRemoveCr(substr(tmpInfoLog.Name,1,254));
        #
        #        // BP deviation documented
        #        treeItem = new FormTreeItem(niceName, tmpInfoLog.Image);
        #        treeItems++;
        #        treeItem.data(0);
        #        treeItem.stateExpanded(true);
        #
        #        treeId[tmpInfoLog.Seq] = this.browserErrorTree().addItem(treeId[tmpInfoLog.Parent], 0, treeItem);
        #        if (treeId[tmpInfoLog.Seq])
        #        {
        #            treeItem           = this.browserErrorTree().getItem(treeId[tmpInfoLog.Seq]);
        #
        #            if (tmpInfoLog.ConIdx)      //not prefix
        #            {
        #                select firstonly forupdate Text, Image, ActionClassId, HelpUrl, RecId from tmpInfoTable
        #                    where tmpInfoTable.RecId == tmpActionId[tmpInfoLog.ConIdx];
        #
        #                tmpInfoTable.Text  = tmpInfolog.Name;
        #                tmpInfoTable.Image = tmpInfolog.Image;
        #                tmpInfoTable.write();
        #                tmpInfoLog.delete();
        #                if (tmpInfoTable.ActionClassId)
        #                    treeItem.overlayImage(this.browserImageList().image(#ImageOverlayAction));
        #                else
        #                {
        #                    if (tmpInfoTable.HelpUrl)
        #                        treeItem.overlayImage(this.browserImageList().image(#ImageOverlayHelp));
        #                }
        #            }
        #            else
        #            {
        #                tmpInfoTable.Action        = connull();
        #                tmpInfoTable.ActionClassId = 0;
        #                tmpInfoTable.Text          = tmpInfolog.Name;
        #                tmpInfoTable.Image         = tmpInfolog.Image;
        #                tmpInfoTable.insert();
        #                offsetSeq = tmpInfolog.Seq;
        #                treeItem.children(true);
        #            }
        #            treeItem.data(tmpInfoTable.RecId);
        #            this.browserErrorTree().setItem(treeItem);
        #        }
        #    }
        #
        #    if ((treeItems > 0 || hasPrefix) && (!this.browserDeleteAll().visible()))
        #    {
        #        this.browser().lock();
        #        this.browserDeleteAll().visible(true);
        #        this.browser().unLock();
        #        this.browser().resetSize();
        #        this.browser().arrange();
        #    }
        #
        #    if (this.browserDeleteAll().visible())
        #        this.browserDeleteAll().updateWindow();
        #
        #    this.browserCloseButton().updateWindow();
        #
        #    if (this.browserErrorTree().visible())
        #        this.browserErrorTree().updateWindow();
        #
        #    if (_emptyTmpInfolog)
        #        this.emptyTmpInfolog();
        #
        #    this.viewRefresh();
        #
        #    if (this.browserCurrentPicture().imageResource() != imageResource)
        #    {
        #        this.browserCurrentPicture().imageResource(imageResource);
        #        this.browserCurrentPicture().updateWindow();
        #    }
        #
        #    if ((treeItems>0 || hasPrefix) && this.browserCurrentError().text() != errorDescription)
        #    {
        #        this.browserCurrentError().text(errorDescription);
        #        this.browserCurrentError().updateWindow();
        #    }
        #    this.browserTopGroup().updateWindow();
        #
        #    if (!this.browser().design().visible())
        #    {
        #        this.browser().design().visible(true);
        #        this.browserErrorTree().updateWindow();
        #        this.browserCurrentError().updateWindow();
        #        this.browserCurrentPicture().updateWindow();
        #        this.browserDeleteAll().updateWindow();
        #        this.browserCloseButton().updateWindow();
        #        this.browserHelpButton().updateWindow();
        #        this.browserActionButton().updateWindow();
        #        this.browserTreeGroup().updateWindow();
        #        this.browserBottomGroup().updateWindow();
        #        this.browser().redraw();
        #    }
        #    tmpActionId[0] = 0; //clear array
        #    endLengthyOperation();
        #}
      ENDSOURCE
      SOURCE #viewCreateRuleDialog
        #public void viewCreateRuleDialog(FormRun _caller)
        #{
        #    ;
        #    EventRule::viewCreateRuleDialog(_caller);
        #}
      ENDSOURCE
      SOURCE #viewDelay
        #void viewDelay(boolean emptyTmpInfolog = true)
        #{
        #    InfologData infologData;
        #    ;
        #    updateCalled = false;
        #    infologData = this.infologData();
        #    this.viewBuild(infologData, emptyTmpInfolog);
        #}
      ENDSOURCE
      SOURCE #viewRefresh
        #void viewRefresh()
        #{
        #    #Resource
        #    #ResAppl
        #    #WinAPI
        #    #define.EM_GetLineCount(0x00BA)
        #
        #    if (!this.browserResizedOnce())
        #    {
        #        this.browserCloseButton().visible(false);
        #        this.browserDeleteAll().visible(false);
        #        this.browser().lock();
        #
        #        this.browserHelpButton().visible(false);
        #        this.browserActionButton().visible(false);
        #        this.browserErrorTree().visible(true);
        #        this.browserDeleteAll().visible(true);
        #        this.browserTreeGroup().visible(true);
        #        this.browserCloseButton().visible(true);
        #        this.browserDeleteAll().visible(true);
        #
        #        if (WinAPI::getWindowLong(this.browser().hWnd(),#GWL_STYLE) & #WS_MAXIMIZE == 0)
        #            this.browser().design().width(340);     //resize if we're not maximized
        #        this.browser().resetSize();
        #        this.browser().arrange();
        #        this.browser().redraw();
        #        this.browser().unLock();
        #        this.browser().redraw();
        #        this.browserResizedOnce(true);
        #    }
        #
        #    this.browserCloseButton().setFocus();
        #}
      ENDSOURCE
      SOURCE #viewUpdate
        #void viewUpdate()
        #{
        #    this.viewDelay(false);
        #    if (!emptyTmpInfologCalled)
        #    {
        #        emptyTmpInfologCalled = true;
        #        this.setTimeOut(identifierstr(emptyTmpInfolog),1,true);
        #    }
        #}
      ENDSOURCE
      SOURCE #watchDog
        #void watchDog()
        #{
        #    int infologLine;
        #    this.setTimeOut(methodstr(Info,watchDog), #watchdogInterval, false);
        #
        #    infologLine = infologLine();
        #    try
        #    {
        #        SysUserLog::updateLogoutTime();
        #        SysUtilElementsLog::persistRegisteredUsages();
        #    }
        #    catch
        #    {
        #        //
        #        // Clean up any exception messages in the infolog, caused by logging.
        #        //
        #        this.clear(infologLine);
        #    }
        #}
      ENDSOURCE
      SOURCE #workspaceCache
        #SysGlobalCache workspaceCache(int workSpaceNum = xInfo::currentWorkspaceNum())
        #{
        #    SysGlobalCache workspaceCache;
        #;
        #    // Construct the singleton cache map object. This will hold a cache
        #    // object associated to each workspace window. The cache will be
        #    // cleaned up in the overriden method workspaceWindowDestroyed()
        #    if (!workspaceCacheMap)
        #    {
        #        workspaceCacheMap = new Map(Types::Integer, Types::Class);
        #    }
        #
        #    // Check if an existing cache is associated with the workspace
        #    if (workspaceCacheMap.exists(this.hWnd(workSpaceNum)))
        #    {
        #        workspaceCache = workspaceCacheMap.lookup(this.hWnd(workSpaceNum));
        #    }
        #    else
        #    {
        #        // construct a new cache and associate it with the current workspace
        #        workspaceCache = SysGlobalCache::construct();
        #        workspaceCacheMap.insert(this.hWnd(workSpaceNum), workspaceCache);
        #    }
        #
        #    return workspaceCache;
        #}
      ENDSOURCE
      SOURCE #workspaceWindowCreated
        #void workspaceWindowCreated(int _hWnd)
        #{
        #    super(_hWnd);
        #
        #    // Put workspace window specific initialization here.
        #}
      ENDSOURCE
      SOURCE #workspaceWindowDestroyed
        #void workspaceWindowDestroyed(int _hWnd)
        #{
        #    FormRun tempWindow;
        #
        #    // Clean up the instance of infolog
        #    if (this.browser())
        #    {
        #        tempWindow = this.browser();
        #        this.browser(null);
        #        if (tempWindow.hWnd())
        #        {
        #            tempWindow.close();
        #        }
        #        tempWindow = null;
        #    }
        #
        #    // Clean up the breakpoint form
        #    if (this.breakpointForm())
        #    {
        #        tempWindow = this.breakpointForm();
        #        this.breakpointForm(null);
        #        if (tempWindow.hWnd())
        #        {
        #            tempWindow.close();
        #        }
        #        tempWindow = null;
        #    }
        #
        #    // This method is called when a workspace window is destroyed
        #    // here workspace related resources can be cleaned up
        #    if (workspaceCacheMap && workspaceCacheMap.exists(_hWnd))
        #    {
        #        // clean up the workspace cache object. This is created in the
        #        // workspaceCache() function.
        #        workspaceCacheMap.remove(_hWnd);
        #    }
        #
        #    super(_hWnd);
        #}
      ENDSOURCE
      SOURCE #xref
        #void xref(str _path, xRef _xRef)
        #{
        #    Map xRefCompileMap;
        #    Map xRefProperyMap;
        #    str className;
        #
        #    ;
        #    lastxRef = _xRef;
        #
        #    if (this.canUpdatexRef())
        #    {
        #        xRefCreate::xRefUpdate(_path);
        #    }
        #    else
        #    {
        #        // if xref information is from compiler add it to xRefCompilerMap else into xRefProperyMap
        #        if(XRefMode::COMPILE == _xRef.mode())
        #        {
        #            xRefCompileMap = infolog.globalCache().get(classstr(xRefUpdateTmpReferences), '', null);
        #            if(xRefCompileMap != null)
        #            {
        #                xRefCompileMap.insert(_path, _xRef);
        #            }
        #        }
        #        else
        #        {
        #            if(XRefMode::PROPERTY == _xRef.mode())
        #            {
        #                className = classstr(xRefUpdateTmpReferences);
        #                className = strins(className,#PropertyString,strlen(classname)+1);
        #                xRefProperyMap = infolog.globalCache().get(className, '', null);
        #                if(xRefProperyMap != null)
        #                {
        #                    xRefProperyMap.insert(_path, _xRef);
        #                }
        #            }
        #        }
        #    }
        #}
      ENDSOURCE
      SOURCE #checkStartupCompany_Server
        #server static void checkStartupCompany_Server(str _curext, userId _curuseid)
        #{
        #    UserInfo userInfo;
        #
        #    if (!hasMenuItemAccess(menuitemdisplaystr(SysDataAreaSelect), MenuItemType::Display) ||
        #        !hasMenuItemAccess(menuitemdisplaystr(OMLegalEntities), MenuItemType::Display))
        #    {
        #        select firstonly Company from userInfo
        #            where userInfo.Id == curuserid();
        #
        #        if (userInfo.Company != curext())
        #        {
        #            appl.setDefaultCompany(userInfo.Company, false);
        #        }
        #    }
        #}
      ENDSOURCE
      SOURCE #con2xml
        #client server static XML con2xml(container _data)
        #{
        #    int j;
        #    Exception    exception;
        #    SysInfologMessageStruct struc;
        #    XmlDocument  doc = XmlDocument::newBlank();
        #    XmlElement   elem, e, e2;
        #    SysInfologEnumerator enum = SysInfologEnumerator::newData(_data);
        #    str          s;
        #
        #    elem = doc.createElement('infolog');
        #    doc.appendChild(elem);
        #
        #    while (enum.moveNext())
        #    {
        #        exception = enum.currentException();
        #        struc = SysInfologMessageStruct::construct(enum.currentMessage());
        #        e2 = elem;
        #        for (j=1; j<= struc.prefixDepth(); j++)
        #        {
        #            if (s)
        #                s = strrem(struc.preFixTextElement(j), ' ');
        #            else
        #                s = '_';
        #
        #            e = doc.createElement(s);
        #            e2.appendChild(e);
        #            e2 = e;
        #        }
        #        e = doc.createElement(strfmt('%1',exception));
        #        e2.appendChild(e);
        #        e.text(struc.message());
        #    }
        #
        #    return strrem(doc.xml(),'\n');
        #}
      ENDSOURCE
      SOURCE #directoryOnServer
        #/// <summary>
        #///    Gets a server side directory based on the directory type.
        #/// </summary>
        #/// <param name="_directoryType">
        #///    The directory type.
        #/// </param>
        #/// <returns>
        #///    The server side directory.
        #/// </returns>
        #public server static FilePath directoryOnServer(DirectoryType _directoryType)
        #{
        #    return xInfo::directory(_directoryType);
        #}
      ENDSOURCE
      SOURCE #infoCon2Str
        #client server static str infoCon2Str(container c)
        #{
        #    str s;
        #    SysInfologEnumerator enum = SysInfologEnumerator::newData(c);
        #
        #    while (enum.moveNext())
        #    {
        #        s+=strfmt('%1#%2#',int2str(enum.currentException()), enum.currentMessage());
        #    }
        #    return s;
        #}
      ENDSOURCE
      SOURCE #infoStr2Con
        #client server static container infoStr2Con(str s)
        #{
        #    container c;
        #    int i = strfind(s, '#', 1, strlen(s));
        #
        #    while (i)
        #    {
        #        c += substr(s, 1, i-1);
        #        s = substr(s, i+1, strlen(s));
        #        i = strfind(s, '#', 1, strlen(s));
        #    }
        #
        #    return c;
        #}
      ENDSOURCE
      SOURCE #licensedComUsers
        #static server int licensedComUsers()
        #{
        #    Dictionary  dictionary = new Dictionary();
        #    SysConfig   sysConfigTemp;
        #
        #    select sysConfigTemp
        #        where sysConfigTemp.Id == licensecodenum(SysCOMUsers)  && (sysConfigTemp.ConfigType == ConfigType::AccessCodes);
        #
        #    return dictionary.testCode(sysConfigTemp.Id,
        #                               sysConfigTemp.Value,
        #                               xSysConfig::find(ConfigType::LicenseName,0).Value,
        #                               xSysConfig::find(ConfigType::SerialNo,0).Value,
        #                               xSysConfig::find(ConfigType::LicenseName,1).Value);
        #}
      ENDSOURCE
      SOURCE #licensedObjectServers
        #static server int licensedObjectServers()
        #{
        #    Dictionary  dictionary = new Dictionary();
        #    SysConfig   sysConfigTemp;
        #
        #    select firstonly sysConfigTemp
        #        where sysConfigTemp.Id == licensecodenum(SysObjectServers)  && (sysConfigTemp.ConfigType == ConfigType::AccessCodes);
        #
        #    return dictionary.testCode(sysConfigTemp.Id,
        #                               sysConfigTemp.Value,
        #                               xSysConfig::find(ConfigType::LicenseName,0).Value,
        #                               xSysConfig::find(ConfigType::SerialNo,0).Value,
        #                               xSysConfig::find(ConfigType::LicenseName,1).Value);
        #}
      ENDSOURCE
      SOURCE #licensedUsers
        #static server int licensedUsers()
        #{
        #    Dictionary  dictionary = new Dictionary();
        #    SysConfig   sysConfigTemp;
        #
        #    select sysConfigTemp
        #        where (sysConfigTemp.Id == licensecodenum(SysUsers)) && (sysConfigTemp.ConfigType == ConfigType::AccessCodes);
        #
        #    return dictionary.testCode(sysConfigTemp.Id,
        #                               sysConfigTemp.Value,
        #                               xSysConfig::find(ConfigType::LicenseName,0).Value,
        #                               xSysConfig::find(ConfigType::SerialNo,0).Value,
        #                               xSysConfig::find(ConfigType::LicenseName,1).Value);
        #}
      ENDSOURCE
      SOURCE #licensedUsersTotal
        #static server int licensedUsersTotal()
        #{
        #    return Info::licensedUsers()+Info::licensedComUsers();
        #}
      ENDSOURCE
      SOURCE #messageWinAddLine
        #client static void messageWinAddLine(str _messageLine)
        #{
        #    infolog.messageWin().addLine(_messageLine);
        #}
      ENDSOURCE
      SOURCE #triCheckApplStartup
        #//TODO: Clean-up env.: temporary lock
        #public static void triCheckApplStartup()
        #{
        #    str     txt;
        #    str     modelName;
        #    str     curUser;
        #    SysSQLSystemInfo   systemInfo =  SysSQLSystemInfo::construct();
        #
        #    //return; //TODO: Uncomment
        #
        #    if (WinAPI::isControlButtonDown())
        #    {
        #        return;
        #    }
        #    // function only for dev system
        #    if (systemInfo.getloginDatabase() != 'AXdev')
        #    {
        #        return;
        #    }
        #    // allow usr log in. application consultants test with tis shortcut
        #    if (currentAOLayer() == UtilEntryLevel::usr)
        #    {
        #        return;
        #    }
        #
        #
        #    curUser = curUserId();
        #    if (curUser == 'iblakhin' || curUser == 'jpiotrow' || curUser == 'rblack' || curUser == 'AxAdmin' || curUser == 'rscruggs' )
        #    {
        #        return;
        #    }
        #
        #    if (currentAOLayer() != UtilEntryLevel::var)
        #    {
        #        txt += strFmt('Incorrect startup layer. Make sure you run valid configuration file that points to "%1" development layer.\n', UtilEntryLevel::vap);
        #    }
        #
        #    modelName = SysModelStore::modelId2Name(xInfo::getCurrentModelId());
        #    if (modelName != 'TRI Model')
        #    {
        #        //txt += strFmt('Incorrect startup model. Make sure you change to the correct model "TRI Model" development model.');
        #        warning("Please change to the develpoment Model: TRI MODEL");
        #    }
        #
        #    if (txt)
        #    {
        #        Box::info(txt, "Incorrect configuration");
        #        //return; //TODO: Uncomment
        #        infolog.shutDown(true);
        #    }
        #}
      ENDSOURCE
    ENDMETHODS
  ENDCLASS

***Element: JOB

; Microsoft Dynamics AX Job: triALM_VCS_ItemsCheckedOut unloaded
; --------------------------------------------------------------------------------
  JOBVERSION 1
  
  SOURCE #triALM_VCS_ItemsCheckedOut
    #//Tribridge - find all items checkout out of version control.
    #static void triALM_VCS_ItemsCheckedOut(Args _args)
    #{
    #    SysVersionControlMorphXLockTable lock;
    #
    #    setprefix("Items Remaining  checked out");
    #    while select lock
    #        order by createdBy
    #        where lock.Version > 0
    #    {
    #        info(strFmt("User:%1 - Item:%2",lock.createdBy,lock.ItemPath));
    #
    #    }
    #
    #
    #
    #}
  ENDSOURCE
  PROPERTIES
    Origin              #{0D212329-11E8-4671-9391-054B5DE1CD7E}
  ENDPROPERTIES
  

***Element: JOB

; Microsoft Dynamics AX Job: triALM_VCS_ItemNotAdded unloaded
; --------------------------------------------------------------------------------
  JOBVERSION 1
  
  SOURCE #triALM_VCS_ItemNotAdded
    #static void triALM_VCS_ItemNotAdded(Args _args)
    #{
    #    // ideitifes items modified but not checked into verison control
    #    // by layer and model. modify where clause for all Models.
    #    #SysVersionControl
    #
    #    SysVersionControlSystem vcsSys = versionControl.parmSysVersionControlSystem();
    #    SysVersionControllable  controlable;
    #
    #    UtilEntryLevel  curLayer    = currentAOLayer();
    #    modelId         curModelId  = xInfo::getCurrentModelId();
    #    str             modelName = SysModelStore::modelId2Name(curModelId);
    #
    #    SysModelElementData elemData, parentData;
    #    SysModelElement     parent, child;
    #    TreeNode            pNode, cNode;
    #
    #    //Set options to skip cache lookup of file names
    #    infolog.globalCache().set(#VCSCache, #NoPrompt,true);
    #
    #    while select RootModelElement from child
    #        group by child.RootModelElement, elemData.ModelId
    #        join ModelId from elemData
    #            where elemData.ModelElement == child.RecId
    #                //Layer numbers in SysModel* views are offset by +1
    #                && elemData.Layer       == (curLayer + 1)
    #                //Remove the following line to include all models
    #                && elemData.ModelId     == curModelId
    #    {
    #        //Get lowest layer copy of parent
    #        select firstOnly parent
    #            order by parentData.Layer
    #                where parent.RecId == child.RootModelElement
    #            join parentData
    #                where parentData.ModelElement == parent.RecId;
    #
    #        pNode = SysTreeNode::findNodeInLayer(
    #                      parent.ElementType, parent.name, 0, parentData.Layer - 1);
    #        if(!pNode)
    #            continue;
    #
    #        controlable = SysTreeNode::newTreeNode(pNode);
    #        if(!controlable)
    #            continue;
    #
    #        if(vcsSys.allowCreate(controlable))
    #        {
    #            //do something if it isn't in version control
    #            info(strfmt("%1 %2",pNode.treeNodePath(), modelName));
    #        }
    #    }
    #}
  ENDSOURCE
  PROPERTIES
    Origin              #{F795BB06-E401-4418-9A7C-4908EB2ECC1D}
  ENDPROPERTIES
  

***Element: PRN

; Microsoft Dynamics AX Project : Tri_ALM unloaded
; --------------------------------------------------------------------------------
  PROJECTVERSION 2
  
  PROJECT #Tri_ALM
  PRIVATE
  PROPERTIES
    Name                #Tri_ALM
    Origin              #{6488DC07-7C83-4711-83DE-B52CD4E46CD7}
  ENDPROPERTIES
  
    PROJECTCLASS ProjectNode
    GROUP #Classes
      PROPERTIES
        Name                #Classes
        ProjectGroupType    #Classes
        GroupMask           #
        PreventEditProperties #No
      ENDPROPERTIES
      
      BEGINNODE
        FILETYPE 0
        UTILTYPE 45
        UTILOBJECTID 2436
        NODETYPE 329
        NAME #EditorScripts
      ENDNODE
      BEGINNODE
        FILETYPE 0
        UTILTYPE 45
        UTILOBJECTID 61444
        NODETYPE 329
        NAME #Info
      ENDNODE
      ENDGROUP
      
    GROUP #Jobs
      PROPERTIES
        Name                #Jobs
        ProjectGroupType    #Jobs
        GroupMask           #
        PreventEditProperties #No
      ENDPROPERTIES
      
      BEGINNODE
        FILETYPE 0
        UTILTYPE 5
        UTILOBJECTID 0
        NODETYPE 215
        NAME #triALM_VCS_ItemsCheckedOut
      ENDNODE
      BEGINNODE
        FILETYPE 0
        UTILTYPE 5
        UTILOBJECTID 0
        NODETYPE 215
        NAME #triALM_VCS_ItemNotAdded
      ENDNODE
      ENDGROUP
      
  ENDPROJECT
  

***Element: END
